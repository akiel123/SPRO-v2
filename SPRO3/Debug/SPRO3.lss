
SPRO3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00001b1e  00001bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  008001b0  008001b0  00001c62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001486  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4d  00000000  00000000  00003c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  00004a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000696  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000111a  00000000  00000000  0000575a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_1>
       8:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2240>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ee e1       	ldi	r30, 0x1E	; 30
     17e:	fb e1       	ldi	r31, 0x1B	; 27
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 3b       	cpi	r26, 0xB0	; 176
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a0 eb       	ldi	r26, 0xB0	; 176
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a6 31       	cpi	r26, 0x16	; 22
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <main>
     1a0:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <__vector_11>:
	PORTC = 0x3F; //set input of all C ports to 1 (no input)
	
	DDRD &= ~(1 << DDD2); //clear the PD2 pin (INT0)
	DDRD &= ~(1 << DDD3); //clear the PD3 pin (INT1)
	PORTD |= (1 << PORTD2); //turn on the Pull-up for PD2 (INT0)
	PORTD |= (1 << PORTD3); //turn on the Pull-up for PD2 (INT1)
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	2f 93       	push	r18
     1bc:	3f 93       	push	r19
     1be:	4f 93       	push	r20
     1c0:	5f 93       	push	r21
     1c2:	6f 93       	push	r22
     1c4:	7f 93       	push	r23
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
     1d6:	0e 94 a9 04 	call	0x952	; 0x952 <ndof_update>
     1da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <getAcc>
     1de:	ec 01       	movw	r28, r24
     1e0:	c0 90 c4 01 	lds	r12, 0x01C4	; 0x8001c4 <vx>
     1e4:	d0 90 c5 01 	lds	r13, 0x01C5	; 0x8001c5 <vx+0x1>
     1e8:	e0 90 c6 01 	lds	r14, 0x01C6	; 0x8001c6 <vx+0x2>
     1ec:	f0 90 c7 01 	lds	r15, 0x01C7	; 0x8001c7 <vx+0x3>
     1f0:	2c ea       	ldi	r18, 0xAC	; 172
     1f2:	35 ec       	ldi	r19, 0xC5	; 197
     1f4:	47 e2       	ldi	r20, 0x27	; 39
     1f6:	5c e3       	ldi	r21, 0x3C	; 60
     1f8:	68 81       	ld	r22, Y
     1fa:	79 81       	ldd	r23, Y+1	; 0x01
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	9b 81       	ldd	r25, Y+3	; 0x03
     200:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     204:	a7 01       	movw	r20, r14
     206:	96 01       	movw	r18, r12
     208:	0e 94 d3 05 	call	0xba6	; 0xba6 <__addsf3>
     20c:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <vx>
     210:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <vx+0x1>
     214:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <vx+0x2>
     218:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <vx+0x3>
     21c:	c0 90 c0 01 	lds	r12, 0x01C0	; 0x8001c0 <vy>
     220:	d0 90 c1 01 	lds	r13, 0x01C1	; 0x8001c1 <vy+0x1>
     224:	e0 90 c2 01 	lds	r14, 0x01C2	; 0x8001c2 <vy+0x2>
     228:	f0 90 c3 01 	lds	r15, 0x01C3	; 0x8001c3 <vy+0x3>
     22c:	2c ea       	ldi	r18, 0xAC	; 172
     22e:	35 ec       	ldi	r19, 0xC5	; 197
     230:	47 e2       	ldi	r20, 0x27	; 39
     232:	5c e3       	ldi	r21, 0x3C	; 60
     234:	6c 81       	ldd	r22, Y+4	; 0x04
     236:	7d 81       	ldd	r23, Y+5	; 0x05
     238:	8e 81       	ldd	r24, Y+6	; 0x06
     23a:	9f 81       	ldd	r25, Y+7	; 0x07
     23c:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     240:	a7 01       	movw	r20, r14
     242:	96 01       	movw	r18, r12
     244:	0e 94 d3 05 	call	0xba6	; 0xba6 <__addsf3>
     248:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <vy>
     24c:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <vy+0x1>
     250:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <vy+0x2>
     254:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <vy+0x3>
     258:	c0 90 bc 01 	lds	r12, 0x01BC	; 0x8001bc <vz>
     25c:	d0 90 bd 01 	lds	r13, 0x01BD	; 0x8001bd <vz+0x1>
     260:	e0 90 be 01 	lds	r14, 0x01BE	; 0x8001be <vz+0x2>
     264:	f0 90 bf 01 	lds	r15, 0x01BF	; 0x8001bf <vz+0x3>
     268:	2c ea       	ldi	r18, 0xAC	; 172
     26a:	35 ec       	ldi	r19, 0xC5	; 197
     26c:	47 e2       	ldi	r20, 0x27	; 39
     26e:	5c e3       	ldi	r21, 0x3C	; 60
     270:	68 85       	ldd	r22, Y+8	; 0x08
     272:	79 85       	ldd	r23, Y+9	; 0x09
     274:	8a 85       	ldd	r24, Y+10	; 0x0a
     276:	9b 85       	ldd	r25, Y+11	; 0x0b
     278:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     27c:	a7 01       	movw	r20, r14
     27e:	96 01       	movw	r18, r12
     280:	0e 94 d3 05 	call	0xba6	; 0xba6 <__addsf3>
     284:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <vz>
     288:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <vz+0x1>
     28c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <vz+0x2>
     290:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <vz+0x3>
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	bf 91       	pop	r27
     29e:	af 91       	pop	r26
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	7f 91       	pop	r23
     2a6:	6f 91       	pop	r22
     2a8:	5f 91       	pop	r21
     2aa:	4f 91       	pop	r20
     2ac:	3f 91       	pop	r19
     2ae:	2f 91       	pop	r18
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <USSInitMeas>:
}

void USSInitMeas(char sensorID){ //Ultrasonic Sensor Read Function
	switch(sensorID){
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	61 f0       	breq	.+24     	; 0x2de <USSInitMeas+0x1c>
     2c6:	18 f4       	brcc	.+6      	; 0x2ce <USSInitMeas+0xc>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	31 f0       	breq	.+12     	; 0x2d8 <USSInitMeas+0x16>
     2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <USSInitMeas+0x22>
     2ce:	84 30       	cpi	r24, 0x04	; 4
     2d0:	19 f0       	breq	.+6      	; 0x2d8 <USSInitMeas+0x16>
     2d2:	88 30       	cpi	r24, 0x08	; 8
     2d4:	21 f0       	breq	.+8      	; 0x2de <USSInitMeas+0x1c>
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <USSInitMeas+0x22>
		case USS1:
		case USS3:
			ussTargetedSide = left;
     2d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ussTargetedSide>
			break;
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <USSInitMeas+0x22>
		case USS2:
		case USS4:
			ussTargetedSide = right;
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ussTargetedSide>
			break;
		default: break; //If default, unregistered sensor id is calling	
	}
	if(!isMeasuring){ //initiate ultrasonic pulse
     2e4:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <isMeasuring>
     2e8:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <isMeasuring+0x1>
     2ec:	23 2b       	or	r18, r19
     2ee:	89 f4       	brne	.+34     	; 0x312 <USSInitMeas+0x50>
		PORTB |= sensorID; //turn on PB0 (Trig Pin) for 10 us
     2f0:	95 b1       	in	r25, 0x05	; 5
     2f2:	98 2b       	or	r25, r24
     2f4:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	95 e3       	ldi	r25, 0x35	; 53
     2f8:	9a 95       	dec	r25
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <USSInitMeas+0x36>
     2fc:	00 00       	nop
		_delay_us(10);
		PORTB &= ~sensorID; //turn off PB0 (Trig Pin)
     2fe:	95 b1       	in	r25, 0x05	; 5
     300:	80 95       	com	r24
     302:	89 23       	and	r24, r25
     304:	85 b9       	out	0x05, r24	; 5
		isMeasuring = 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <isMeasuring+0x1>
     30e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <isMeasuring>
	}
	time1 = 0;
     312:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <time1+0x1>
     316:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <time1>
     31a:	08 95       	ret

0000031c <USSReadNext>:
	vy += accelration[1] * 0.01024;
	vz += accelration[2] * 0.01024;
}

void USSReadNext(){
	USSInitMeas(ussSensorIDs[ussSensorIDNextIndex]);
     31c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <__data_end>
     320:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <__data_end+0x1>
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	e2 5e       	subi	r30, 0xE2	; 226
     32a:	fe 4f       	sbci	r31, 0xFE	; 254
     32c:	80 81       	ld	r24, Z
     32e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <USSInitMeas>
	ussSensorIDNextIndex++;
     332:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     336:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__data_end+0x1>
     340:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
	if(ussSensorIDNextIndex >= 4) ussSensorIDNextIndex = 0;
     344:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     348:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     34c:	04 97       	sbiw	r24, 0x04	; 4
     34e:	24 f0       	brlt	.+8      	; 0x358 <USSReadNext+0x3c>
     350:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <__data_end+0x1>
     354:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <__data_end>
     358:	08 95       	ret

0000035a <__vector_14>:
	t = time1;
	ussMeasuredSide = right;
	USSHandleRead();
}

ISR (TIMER0_COMPA_vect){ //Triggers every 1us
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	2f 93       	push	r18
     366:	3f 93       	push	r19
     368:	4f 93       	push	r20
     36a:	5f 93       	push	r21
     36c:	6f 93       	push	r22
     36e:	7f 93       	push	r23
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	af 93       	push	r26
     376:	bf 93       	push	r27
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
	//Uss section
	//Call uss sensor every reasonable interval. At least 2ms between,
	//to make sure previous signal has faded
	time1++; //counts in microseconds
     37c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time1>
     380:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time1+0x1>
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <time1+0x1>
     38a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <time1>
	if(time1 > 6000){
     38e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time1>
     392:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time1+0x1>
     396:	81 37       	cpi	r24, 0x71	; 113
     398:	97 41       	sbci	r25, 0x17	; 23
     39a:	4c f0       	brlt	.+18     	; 0x3ae <__vector_14+0x54>
		time1 = -2; //make sure that time doesnt start incrementing before read is ready
     39c:	8e ef       	ldi	r24, 0xFE	; 254
     39e:	9f ef       	ldi	r25, 0xFF	; 255
     3a0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <time1+0x1>
     3a4:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <time1>
		USSReadNext();
     3a8:	0e 94 8e 01 	call	0x31c	; 0x31c <USSReadNext>
     3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <__vector_14+0x6c>
	}
	else if(time1 < 0){
     3ae:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time1>
     3b2:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time1+0x1>
     3b6:	99 23       	and	r25, r25
     3b8:	34 f4       	brge	.+12     	; 0x3c6 <__vector_14+0x6c>
		time1 = -2;
     3ba:	8e ef       	ldi	r24, 0xFE	; 254
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <time1+0x1>
     3c2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <time1>
	}
	
	//Pwm section
	if(breaking){
     3c6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <breaking>
     3ca:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <breaking+0x1>
     3ce:	89 2b       	or	r24, r25
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <__vector_14+0x7a>
     3d2:	53 c0       	rjmp	.+166    	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
		if(currentVelocity > breakSpeed){
     3d4:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <currentVelocity>
     3d8:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <currentVelocity+0x1>
     3dc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <currentVelocity+0x2>
     3e0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <currentVelocity+0x3>
     3e4:	2d ec       	ldi	r18, 0xCD	; 205
     3e6:	3c ec       	ldi	r19, 0xCC	; 204
     3e8:	4c ec       	ldi	r20, 0xCC	; 204
     3ea:	5d e3       	ldi	r21, 0x3D	; 61
     3ec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__gesf2>
     3f0:	18 16       	cp	r1, r24
     3f2:	c4 f4       	brge	.+48     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
			pwmMotor = -(pwmMax * breakingPower);
     3f4:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <pwmMax>
     3f8:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <pwmMax+0x1>
     3fc:	07 2e       	mov	r0, r23
     3fe:	00 0c       	add	r0, r0
     400:	88 0b       	sbc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatsisf>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	5f e3       	ldi	r21, 0x3F	; 63
     410:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     414:	90 58       	subi	r25, 0x80	; 128
     416:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixsfsi>
     41a:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <pwmMotor+0x1>
     41e:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <pwmMotor>
     422:	2b c0       	rjmp	.+86     	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
		}
		else if(currentVelocity < -breakSpeed){
     424:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <currentVelocity>
     428:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <currentVelocity+0x1>
     42c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <currentVelocity+0x2>
     430:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <currentVelocity+0x3>
     434:	2d ec       	ldi	r18, 0xCD	; 205
     436:	3c ec       	ldi	r19, 0xCC	; 204
     438:	4c ec       	ldi	r20, 0xCC	; 204
     43a:	5d eb       	ldi	r21, 0xBD	; 189
     43c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__cmpsf2>
     440:	88 23       	and	r24, r24
     442:	bc f4       	brge	.+46     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
			pwmMotor = pwmMax * breakingPower;
     444:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <pwmMax>
     448:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <pwmMax+0x1>
     44c:	07 2e       	mov	r0, r23
     44e:	00 0c       	add	r0, r0
     450:	88 0b       	sbc	r24, r24
     452:	99 0b       	sbc	r25, r25
     454:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatsisf>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	5f e3       	ldi	r21, 0x3F	; 63
     460:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     464:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixsfsi>
     468:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <pwmMotor+0x1>
     46c:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <pwmMotor>
     470:	04 c0       	rjmp	.+8      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
		}
		else breaking = 0;
     472:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <breaking+0x1>
     476:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <breaking>
	}
	
	if(pwmMotor > 0){ //If target velocity is positive
     47a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pwmMotor>
     47e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pwmMotor+0x1>
     482:	18 16       	cp	r1, r24
     484:	19 06       	cpc	r1, r25
     486:	ec f4       	brge	.+58     	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
		if(pwmTime == pwmMotor){ //turn off output
     488:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     48c:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     490:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pwmMotor>
     494:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pwmMotor+0x1>
     498:	28 17       	cp	r18, r24
     49a:	39 07       	cpc	r19, r25
     49c:	29 f4       	brne	.+10     	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
			MOTOR_PORT = MOTOR_PORT ^ MOTOR_FORWARD;	
     49e:	9b b1       	in	r25, 0x0b	; 11
     4a0:	80 e4       	ldi	r24, 0x40	; 64
     4a2:	89 27       	eor	r24, r25
     4a4:	8b b9       	out	0x0b, r24	; 11
     4a6:	2b c0       	rjmp	.+86     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
		}
		else if(pwmTime == pwmMax){//turn on output
     4a8:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     4ac:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     4b0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <pwmMax>
     4b4:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <pwmMax+0x1>
     4b8:	28 17       	cp	r18, r24
     4ba:	39 07       	cpc	r19, r25
     4bc:	01 f5       	brne	.+64     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
			MOTOR_PORT |= MOTOR_FORWARD; 
     4be:	5e 9a       	sbi	0x0b, 6	; 11
     4c0:	1e c0       	rjmp	.+60     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
		}
	} else { //If target velocity is negative
		if(pwmTime == -pwmMotor){//turn off output
     4c2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pwmMotor>
     4c6:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pwmMotor+0x1>
     4ca:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     4ce:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     4d2:	91 95       	neg	r25
     4d4:	81 95       	neg	r24
     4d6:	91 09       	sbc	r25, r1
     4d8:	82 17       	cp	r24, r18
     4da:	93 07       	cpc	r25, r19
     4dc:	21 f4       	brne	.+8      	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
			MOTOR_PORT = MOTOR_PORT ^ MOTOR_BACKWARD;
     4de:	8b b1       	in	r24, 0x0b	; 11
     4e0:	80 58       	subi	r24, 0x80	; 128
     4e2:	8b b9       	out	0x0b, r24	; 11
     4e4:	0c c0       	rjmp	.+24     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
		}
		else if(pwmTime == pwmMax){//turn on output
     4e6:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     4ea:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     4ee:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <pwmMax>
     4f2:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <pwmMax+0x1>
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	09 f4       	brne	.+2      	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
			MOTOR_PORT |= MOTOR_BACKWARD;
     4fc:	5f 9a       	sbi	0x0b, 7	; 11
		}
	}
	
	if(pwmTime == pwmSteering){//turn off output
     4fe:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     502:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     506:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <pwmSteering>
     50a:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <pwmSteering+0x1>
     50e:	28 17       	cp	r18, r24
     510:	39 07       	cpc	r19, r25
     512:	21 f4       	brne	.+8      	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
		STEERING_PORT = STEERING_PORT ^ STEERING_PIN;
     514:	9b b1       	in	r25, 0x0b	; 11
     516:	80 e2       	ldi	r24, 0x20	; 32
     518:	89 27       	eor	r24, r25
     51a:	8b b9       	out	0x0b, r24	; 11
	}
	if(pwmTime == pwmMax){//turn on output
     51c:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <pwmTime>
     520:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     524:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <pwmMax>
     528:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <pwmMax+0x1>
     52c:	28 17       	cp	r18, r24
     52e:	39 07       	cpc	r19, r25
     530:	29 f4       	brne	.+10     	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
		STEERING_PORT |= STEERING_PIN;
     532:	5d 9a       	sbi	0x0b, 5	; 11
		pwmTime = 0;
     534:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <pwmTime+0x1>
     538:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <pwmTime>
	}
	pwmTime++;
     53c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <pwmTime>
     540:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <pwmTime+0x1>
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <pwmTime+0x1>
     54a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <pwmTime>
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <USSHandleRead>:
	}
	time1 = 0;
}

void USSHandleRead(){
	if(ussTargetedSide == ussMeasuredSide){
     570:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ussTargetedSide>
     574:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     578:	98 13       	cpse	r25, r24
     57a:	37 c0       	rjmp	.+110    	; 0x5ea <USSHandleRead+0x7a>
		ussTargetedSide = none;
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ussTargetedSide>
		isMeasuring = 0;
     582:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <isMeasuring+0x1>
     586:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <isMeasuring>
		if(t > 150 && t < 6000){ //only consider reasonable measurements, 150~6000 (min/max)
     58a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <t>
     58e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <t+0x1>
     592:	87 39       	cpi	r24, 0x97	; 151
     594:	91 05       	cpc	r25, r1
     596:	4c f1       	brlt	.+82     	; 0x5ea <USSHandleRead+0x7a>
     598:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <t>
     59c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <t+0x1>
     5a0:	80 37       	cpi	r24, 0x70	; 112
     5a2:	97 41       	sbci	r25, 0x17	; 23
     5a4:	14 f5       	brge	.+68     	; 0x5ea <USSHandleRead+0x7a>
			if(t > stopcrossvalue){
     5a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <t>
     5aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <t+0x1>
				//Handle object measured outside critical range
			}
			if(t <= stopcrossvalue){   //Print stop if distance is below threshold
     5ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <t>
     5b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <t+0x1>
				//Handle object measured inside critical range
			}
			if((j & 0b10000000)==0b10000000){ //Sensor side 1
     5b6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <j>
     5ba:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <j+0x1>
     5be:	87 ff       	sbrs	r24, 7
     5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <USSHandleRead+0x66>
				j = j ^ 0b10000000; //reset print state
     5c2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <j>
     5c6:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <j+0x1>
     5ca:	80 58       	subi	r24, 0x80	; 128
     5cc:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <j+0x1>
     5d0:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <j>
     5d4:	08 95       	ret
			}
			else{ //Sensor side 2
				j = j ^ 0b01000000; //reset print state
     5d6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <j>
     5da:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <j+0x1>
     5de:	20 e4       	ldi	r18, 0x40	; 64
     5e0:	82 27       	eor	r24, r18
     5e2:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <j+0x1>
     5e6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <j>
     5ea:	08 95       	ret

000005ec <__vector_1>:
		*(deg + i) = rad[i] * Rad2Deg;
	}
	return deg;
}

ISR (INT0_vect){ //Read registered on left ultra sound sensor
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	t = time1; //Stores exact time
     60e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time1>
     612:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time1+0x1>
     616:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <t+0x1>
     61a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <t>
	ussMeasuredSide = left;
     61e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	USSHandleRead ();
     622:	0e 94 b8 02 	call	0x570	; 0x570 <USSHandleRead>
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_2>:

ISR (INT1_vect){ //Read registered on right USS
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
	t = time1;
     66a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time1>
     66e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time1+0x1>
     672:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <t+0x1>
     676:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <t>
	ussMeasuredSide = right;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	USSHandleRead();
     680:	0e 94 b8 02 	call	0x570	; 0x570 <USSHandleRead>
}
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	7f 91       	pop	r23
     692:	6f 91       	pop	r22
     694:	5f 91       	pop	r21
     696:	4f 91       	pop	r20
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <getAcc>:
float gyro_data[3]; //First is up down, second is for-/backwards, third sideways 
float magnetometer_data[3];
float velocity[3];
float rotation[3]; 

float* getAcc(void){//returns as acceleration in m/s^2 (Allegedly)
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <getAcc+0xa>
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <getAcc+0xc>
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <getAcc+0xe>
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
	float* result[3];
	for(int i = 0; i < 3; i++){
		result[i] = 0;
	}
	*result[0] = ((accelerometer_data[0] - ADXL_XMIN) - ADXL_XRANGE/2) / (ADXL_XRANGE) * 9.82;
     6b8:	04 ed       	ldi	r16, 0xD4	; 212
     6ba:	11 e0       	ldi	r17, 0x01	; 1
	*result[1] = ((accelerometer_data[1] - ADXL_YMIN) - ADXL_YRANGE/2) / (ADXL_YRANGE) * 9.82;
	*result[2] = ((accelerometer_data[1] - ADXL_ZMIN) - ADXL_ZRANGE/2) / (ADXL_ZRANGE) * 9.82;
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	46 e9       	ldi	r20, 0x96	; 150
     6c2:	52 e4       	ldi	r21, 0x42	; 66
     6c4:	f8 01       	movw	r30, r16
     6c6:	64 81       	ldd	r22, Z+4	; 0x04
     6c8:	75 81       	ldd	r23, Z+5	; 0x05
     6ca:	86 81       	ldd	r24, Z+6	; 0x06
     6cc:	97 81       	ldd	r25, Z+7	; 0x07
     6ce:	0e 94 d2 05 	call	0xba4	; 0xba4 <__subsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	48 ec       	ldi	r20, 0xC8	; 200
     6d8:	53 e4       	ldi	r21, 0x43	; 67
     6da:	0e 94 d2 05 	call	0xba4	; 0xba4 <__subsf3>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	48 e4       	ldi	r20, 0x48	; 72
     6e4:	54 e4       	ldi	r21, 0x44	; 68
     6e6:	0e 94 44 06 	call	0xc88	; 0xc88 <__divsf3>
     6ea:	28 eb       	ldi	r18, 0xB8	; 184
     6ec:	3e e1       	ldi	r19, 0x1E	; 30
     6ee:	4d e1       	ldi	r20, 0x1D	; 29
     6f0:	51 e4       	ldi	r21, 0x41	; 65
     6f2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__mulsf3>
     6f6:	60 93 00 00 	sts	0x0000, r22	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
     6fa:	70 93 01 00 	sts	0x0001, r23	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
     6fe:	80 93 02 00 	sts	0x0002, r24	; 0x800002 <__TEXT_REGION_LENGTH__+0x7e0002>
     702:	90 93 03 00 	sts	0x0003, r25	; 0x800003 <__TEXT_REGION_LENGTH__+0x7e0003>
	
	return accelerometer_data;
}
     706:	c8 01       	movw	r24, r16
     708:	26 96       	adiw	r28, 0x06	; 6
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <getGyro>:
float* getGyro(void){//returns as rad/s
	return gyro_data;
}
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	08 95       	ret

00000724 <getMag>:
float* getMag(void){
	return magnetometer_data;
}
     724:	80 ee       	ldi	r24, 0xE0	; 224
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	08 95       	ret

0000072a <ai2c_write_data>:
	//printf("Done Updating Ndof");
	
	
}

void ai2c_write_data(int address, char reg, char data) {
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	d6 2f       	mov	r29, r22
     730:	c4 2f       	mov	r28, r20
	// Send output register address
	//printf("Writing Data starting\n");
	i2c_start_wait(address + I2C_WRITE); //Select unit to be adressed. I2C specifies that data will be written
     732:	0e 94 45 05 	call	0xa8a	; 0xa8a <i2c_start_wait>
	//printf("Done starting\n");
	i2c_write(reg); //Select register to transfer to
     736:	8d 2f       	mov	r24, r29
     738:	0e 94 76 05 	call	0xaec	; 0xaec <i2c_write>
	//printf("Wrote Register\n");
	i2c_write(data); //Transfer data
     73c:	8c 2f       	mov	r24, r28
     73e:	0e 94 76 05 	call	0xaec	; 0xaec <i2c_write>
	//printf("Wrote data\n");
	i2c_stop();
     742:	0e 94 6d 05 	call	0xada	; 0xada <i2c_stop>
	//printf("Done\n");
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <i2c_read_count>:

void i2c_read_count(int address, char reg, int count, char* data) {
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	c8 2f       	mov	r28, r24
     75e:	d6 2f       	mov	r29, r22
     760:	7a 01       	movw	r14, r20
     762:	69 01       	movw	r12, r18
	//printf("Reading Data starting\n");
	i2c_start_wait(address + I2C_WRITE);
     764:	0e 94 45 05 	call	0xa8a	; 0xa8a <i2c_start_wait>
	//printf("Done starting, specifying register\n");
	i2c_write(reg);
     768:	8d 2f       	mov	r24, r29
     76a:	0e 94 76 05 	call	0xaec	; 0xaec <i2c_write>
	//printf("Starting again\n");
	i2c_start_wait(address + I2C_READ);
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	8c 0f       	add	r24, r28
     772:	0e 94 45 05 	call	0xa8a	; 0xa8a <i2c_start_wait>
	//printf("Reading data: ");
	for(int i = 0; i < count - 1; i++){
     776:	c7 01       	movw	r24, r14
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	18 16       	cp	r1, r24
     77c:	19 06       	cpc	r1, r25
     77e:	54 f4       	brge	.+20     	; 0x794 <i2c_read_count+0x48>
     780:	e6 01       	movw	r28, r12
     782:	8c 01       	movw	r16, r24
     784:	0c 0d       	add	r16, r12
     786:	1d 1d       	adc	r17, r13
		data[i] = i2c_readAck();
     788:	0e 94 88 05 	call	0xb10	; 0xb10 <i2c_readAck>
     78c:	89 93       	st	Y+, r24
	//printf("Done starting, specifying register\n");
	i2c_write(reg);
	//printf("Starting again\n");
	i2c_start_wait(address + I2C_READ);
	//printf("Reading data: ");
	for(int i = 0; i < count - 1; i++){
     78e:	c0 17       	cp	r28, r16
     790:	d1 07       	cpc	r29, r17
     792:	d1 f7       	brne	.-12     	; 0x788 <i2c_read_count+0x3c>
		data[i] = i2c_readAck();
		//printf("%d, ", (int)(data[i]));
	}
	data[count - 1] = i2c_readNak();
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	e8 1a       	sub	r14, r24
     798:	f1 08       	sbc	r15, r1
     79a:	e6 01       	movw	r28, r12
     79c:	ce 0d       	add	r28, r14
     79e:	df 1d       	adc	r29, r15
     7a0:	0e 94 93 05 	call	0xb26	; 0xb26 <i2c_readNak>
     7a4:	88 83       	st	Y, r24
	//printf("%d \n", (int)(data[count - 1]));	
	//printf("\n");
	//printf("Done reading data");
	i2c_stop();
     7a6:	0e 94 6d 05 	call	0xada	; 0xada <i2c_stop>
	//printf("Done reading\n");	
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	08 95       	ret

000007bc <init_adxl345>:

void init_adxl345(void) {
	printf("Initializing adx1345\n");
     7bc:	86 e2       	ldi	r24, 0x26	; 38
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
	//Set range
	char setting = 0b00000000; //Set range to +-4g
	ai2c_write_data(ADXL345_ADDRESS, ADXL_DATA_FORMAT, setting);
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	61 e3       	ldi	r22, 0x31	; 49
     7c8:	86 ea       	ldi	r24, 0xA6	; 166
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 95 03 	call	0x72a	; 0x72a <ai2c_write_data>
	ai2c_write_data(ADXL345_ADDRESS, ADXL_REGISTER_PWRCTL, ADXL_PWRCTL_MEASURE);
     7d0:	48 e0       	ldi	r20, 0x08	; 8
     7d2:	6d e2       	ldi	r22, 0x2D	; 45
     7d4:	86 ea       	ldi	r24, 0xA6	; 166
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 95 03 	call	0x72a	; 0x72a <ai2c_write_data>
	printf("Done\n");
     7dc:	8b e3       	ldi	r24, 0x3B	; 59
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
     7e4:	08 95       	ret

000007e6 <read_adxl345>:
}

void read_adxl345(void) {
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <read_adxl345+0x12>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <read_adxl345+0x14>
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <read_adxl345+0x16>
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
	char bytes[6];
	for(int i = 0; i < 6; i++){
		bytes[i] = 0;
     800:	19 82       	std	Y+1, r1	; 0x01
     802:	1a 82       	std	Y+2, r1	; 0x02
     804:	1b 82       	std	Y+3, r1	; 0x03
     806:	1c 82       	std	Y+4, r1	; 0x04
     808:	1d 82       	std	Y+5, r1	; 0x05
     80a:	1e 82       	std	Y+6, r1	; 0x06
	}

	//read 6 bytes from the ADXL345
	i2c_read_count(ADXL345_ADDRESS, ADXL345_REGISTER_XLSB, 6, bytes);
     80c:	9e 01       	movw	r18, r28
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	46 e0       	ldi	r20, 0x06	; 6
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	62 e3       	ldi	r22, 0x32	; 50
     818:	86 ea       	ldi	r24, 0xA6	; 166
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_read_count>
     820:	6e 01       	movw	r12, r28
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	c8 0e       	add	r12, r24
     826:	d1 1c       	adc	r13, r1
     828:	04 ed       	ldi	r16, 0xD4	; 212
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	0f 2e       	mov	r0, r31
     82e:	f0 ee       	ldi	r31, 0xE0	; 224
     830:	ef 2e       	mov	r14, r31
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	ff 2e       	mov	r15, r31
     836:	f0 2d       	mov	r31, r0
     838:	f6 01       	movw	r30, r12
     83a:	31 97       	sbiw	r30, 0x01	; 1

	//now unpack the bytes
	for (int i=0;i<3;++i) {
		accelerometer_data[i] = (int)bytes[2*i] + (((int)bytes[2*i + 1]) << 8);
     83c:	80 81       	ld	r24, Z
     83e:	f6 01       	movw	r30, r12
     840:	60 81       	ld	r22, Z
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	76 2f       	mov	r23, r22
     846:	66 27       	eor	r22, r22
     848:	68 0f       	add	r22, r24
     84a:	71 1d       	adc	r23, r1
     84c:	07 2e       	mov	r0, r23
     84e:	00 0c       	add	r0, r0
     850:	88 0b       	sbc	r24, r24
     852:	99 0b       	sbc	r25, r25
     854:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatsisf>
     858:	f8 01       	movw	r30, r16
     85a:	61 93       	st	Z+, r22
     85c:	71 93       	st	Z+, r23
     85e:	81 93       	st	Z+, r24
     860:	91 93       	st	Z+, r25
     862:	8f 01       	movw	r16, r30
     864:	f2 e0       	ldi	r31, 0x02	; 2
     866:	cf 0e       	add	r12, r31
     868:	d1 1c       	adc	r13, r1

	//read 6 bytes from the ADXL345
	i2c_read_count(ADXL345_ADDRESS, ADXL345_REGISTER_XLSB, 6, bytes);

	//now unpack the bytes
	for (int i=0;i<3;++i) {
     86a:	0e 15       	cp	r16, r14
     86c:	1f 05       	cpc	r17, r15
     86e:	21 f7       	brne	.-56     	; 0x838 <read_adxl345+0x52>
		accelerometer_data[i] = (int)bytes[2*i] + (((int)bytes[2*i + 1]) << 8);
	}
}
     870:	26 96       	adiw	r28, 0x06	; 6
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <init_itg3200>:

void init_itg3200(void) {
	printf("Initializing itg3200\n");
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>

	//Set DLPF to 42 Hz (change it if you want) and
	//set the scale to "Full Scale"
	ai2c_write_data(ITG3200_ADDRESS, ITG3200_REGISTER_DLPF_FS, ITG3200_FULLSCALE | ITG3200_42HZ);
     896:	4b e1       	ldi	r20, 0x1B	; 27
     898:	66 e1       	ldi	r22, 0x16	; 22
     89a:	80 ed       	ldi	r24, 0xD0	; 208
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 95 03 	call	0x72a	; 0x72a <ai2c_write_data>
	printf("Done\n");
     8a2:	8b e3       	ldi	r24, 0x3B	; 59
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
     8aa:	08 95       	ret

000008ac <read_itg3200>:
}

void read_itg3200(void) {
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <read_itg3200+0x12>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <read_itg3200+0x14>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <read_itg3200+0x16>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	char bytes[6];
	for(int i = 0; i < 6; i++){
		bytes[i] = 0;
     8c6:	19 82       	std	Y+1, r1	; 0x01
     8c8:	1a 82       	std	Y+2, r1	; 0x02
     8ca:	1b 82       	std	Y+3, r1	; 0x03
     8cc:	1c 82       	std	Y+4, r1	; 0x04
     8ce:	1d 82       	std	Y+5, r1	; 0x05
     8d0:	1e 82       	std	Y+6, r1	; 0x06
	}

	//read 6 bytes from the ITG3200
	i2c_read_count(ITG3200_ADDRESS, ITG3200_REGISTER_XMSB, 6, bytes);  //now unpack the bytes
     8d2:	9e 01       	movw	r18, r28
     8d4:	2f 5f       	subi	r18, 0xFF	; 255
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	46 e0       	ldi	r20, 0x06	; 6
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	6d e1       	ldi	r22, 0x1D	; 29
     8de:	80 ed       	ldi	r24, 0xD0	; 208
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_read_count>
     8e6:	6e 01       	movw	r12, r28
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	c8 0e       	add	r12, r24
     8ec:	d1 1c       	adc	r13, r1
     8ee:	04 e0       	ldi	r16, 0x04	; 4
     8f0:	12 e0       	ldi	r17, 0x02	; 2
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f0 e1       	ldi	r31, 0x10	; 16
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f2 e0       	ldi	r31, 0x02	; 2
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
	for (int i=0;i<3;++i) {
		gyro_data [i] = (int)bytes[2*i + 1] + (((int)bytes[2*i]) << 8);
     8fe:	f6 01       	movw	r30, r12
     900:	80 81       	ld	r24, Z
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	60 81       	ld	r22, Z
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	76 2f       	mov	r23, r22
     90a:	66 27       	eor	r22, r22
     90c:	68 0f       	add	r22, r24
     90e:	71 1d       	adc	r23, r1
     910:	07 2e       	mov	r0, r23
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatsisf>
     91c:	f8 01       	movw	r30, r16
     91e:	61 93       	st	Z+, r22
     920:	71 93       	st	Z+, r23
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25
     926:	8f 01       	movw	r16, r30
     928:	f2 e0       	ldi	r31, 0x02	; 2
     92a:	cf 0e       	add	r12, r31
     92c:	d1 1c       	adc	r13, r1
		bytes[i] = 0;
	}

	//read 6 bytes from the ITG3200
	i2c_read_count(ITG3200_ADDRESS, ITG3200_REGISTER_XMSB, 6, bytes);  //now unpack the bytes
	for (int i=0;i<3;++i) {
     92e:	0e 15       	cp	r16, r14
     930:	1f 05       	cpc	r17, r15
     932:	29 f7       	brne	.-54     	; 0x8fe <read_itg3200+0x52>
		gyro_data [i] = (int)bytes[2*i + 1] + (((int)bytes[2*i]) << 8);
	}
}
     934:	26 96       	adiw	r28, 0x06	; 6
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	08 95       	ret

00000952 <ndof_update>:
	init_itg3200();
}

void ndof_update(){
	//printf("Updating Ndof");
	read_adxl345();
     952:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <read_adxl345>
	read_itg3200();
     956:	0e 94 56 04 	call	0x8ac	; 0x8ac <read_itg3200>
     95a:	08 95       	ret

0000095c <init_hmc5843>:
		gyro_data [i] = (int)bytes[2*i + 1] + (((int)bytes[2*i]) << 8);
	}
}

void init_hmc5843(void) {
	printf("Initializing hmc5843\n");
     95c:	85 e5       	ldi	r24, 0x55	; 85
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
	//set up continuous measurement
	ai2c_write_data(HMC5843_ADDRESS, HMC5843_REGISTER_MEASMODE, HMC5843_MEASMODE_CONT);
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	8c e3       	ldi	r24, 0x3C	; 60
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 95 03 	call	0x72a	; 0x72a <ai2c_write_data>
	printf("Done\n");
     970:	8b e3       	ldi	r24, 0x3B	; 59
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
     978:	08 95       	ret

0000097a <ndof_init>:
}
float* getMag(void){
	return magnetometer_data;
}

void ndof_init(void){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
	
	PORTC &= ~(1 << PORTC5) | ~(1 << PORTC4); //Set PC4 and PC5 (SDA and SDL) as input
     97e:	88 b1       	in	r24, 0x08	; 8
     980:	88 b9       	out	0x08, r24	; 8
	
	i2c_init();
     982:	0e 94 3f 05 	call	0xa7e	; 0xa7e <i2c_init>
	for(int i = 0; i < 3; ++i) {
		accelerometer_data[i] = 0;
     986:	c4 ed       	ldi	r28, 0xD4	; 212
     988:	d1 e0       	ldi	r29, 0x01	; 1
     98a:	18 82       	st	Y, r1
     98c:	19 82       	std	Y+1, r1	; 0x01
     98e:	1a 82       	std	Y+2, r1	; 0x02
     990:	1b 82       	std	Y+3, r1	; 0x03
		magnetometer_data[i] = 0;
     992:	a0 ee       	ldi	r26, 0xE0	; 224
     994:	b1 e0       	ldi	r27, 0x01	; 1
     996:	1d 92       	st	X+, r1
     998:	1d 92       	st	X+, r1
     99a:	1d 92       	st	X+, r1
     99c:	1c 92       	st	X, r1
     99e:	13 97       	sbiw	r26, 0x03	; 3
		gyro_data[i] = 0;
     9a0:	e4 e0       	ldi	r30, 0x04	; 4
     9a2:	f2 e0       	ldi	r31, 0x02	; 2
     9a4:	10 82       	st	Z, r1
     9a6:	11 82       	std	Z+1, r1	; 0x01
     9a8:	12 82       	std	Z+2, r1	; 0x02
     9aa:	13 82       	std	Z+3, r1	; 0x03
	
	PORTC &= ~(1 << PORTC5) | ~(1 << PORTC4); //Set PC4 and PC5 (SDA and SDL) as input
	
	i2c_init();
	for(int i = 0; i < 3; ++i) {
		accelerometer_data[i] = 0;
     9ac:	1c 82       	std	Y+4, r1	; 0x04
     9ae:	1d 82       	std	Y+5, r1	; 0x05
     9b0:	1e 82       	std	Y+6, r1	; 0x06
     9b2:	1f 82       	std	Y+7, r1	; 0x07
		magnetometer_data[i] = 0;
     9b4:	14 96       	adiw	r26, 0x04	; 4
     9b6:	1d 92       	st	X+, r1
     9b8:	1d 92       	st	X+, r1
     9ba:	1d 92       	st	X+, r1
     9bc:	1c 92       	st	X, r1
     9be:	17 97       	sbiw	r26, 0x07	; 7
		gyro_data[i] = 0;
     9c0:	14 82       	std	Z+4, r1	; 0x04
     9c2:	15 82       	std	Z+5, r1	; 0x05
     9c4:	16 82       	std	Z+6, r1	; 0x06
     9c6:	17 82       	std	Z+7, r1	; 0x07
	
	PORTC &= ~(1 << PORTC5) | ~(1 << PORTC4); //Set PC4 and PC5 (SDA and SDL) as input
	
	i2c_init();
	for(int i = 0; i < 3; ++i) {
		accelerometer_data[i] = 0;
     9c8:	18 86       	std	Y+8, r1	; 0x08
     9ca:	19 86       	std	Y+9, r1	; 0x09
     9cc:	1a 86       	std	Y+10, r1	; 0x0a
     9ce:	1b 86       	std	Y+11, r1	; 0x0b
		magnetometer_data[i] = 0;
     9d0:	18 96       	adiw	r26, 0x08	; 8
     9d2:	1d 92       	st	X+, r1
     9d4:	1d 92       	st	X+, r1
     9d6:	1d 92       	st	X+, r1
     9d8:	1c 92       	st	X, r1
     9da:	1b 97       	sbiw	r26, 0x0b	; 11
		gyro_data[i] = 0;
     9dc:	10 86       	std	Z+8, r1	; 0x08
     9de:	11 86       	std	Z+9, r1	; 0x09
     9e0:	12 86       	std	Z+10, r1	; 0x0a
     9e2:	13 86       	std	Z+11, r1	; 0x0b
	}
	init_adxl345();
     9e4:	0e 94 de 03 	call	0x7bc	; 0x7bc <init_adxl345>
	init_hmc5843();
     9e8:	0e 94 ae 04 	call	0x95c	; 0x95c <init_hmc5843>
	init_itg3200();
     9ec:	0e 94 47 04 	call	0x88e	; 0x88e <init_itg3200>
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <testI2C>:
    {
    }
}

void testI2C(void){
	printf("Starting Initializations\n");
     9f6:	8a e6       	ldi	r24, 0x6A	; 106
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
	uart_init();
     9fe:	0e 94 b6 05 	call	0xb6c	; 0xb6c <uart_init>
	io_redirect();
     a02:	0e 94 c7 05 	call	0xb8e	; 0xb8e <io_redirect>
	ndof_init();
     a06:	0e 94 bd 04 	call	0x97a	; 0x97a <ndof_init>
	uart_init();
     a0a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <uart_init>
	io_redirect();
     a0e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <io_redirect>
	printf("Done Initializing\n");
     a12:	83 e8       	ldi	r24, 0x83	; 131
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <puts>
		ndof_update();
		float* acc = getAcc	();
		float* gyr = getGyro();
		float* mag = getMag	();
		//printf("Update %d: \n", count);
		printf("Accelerometer: %f, %f, %f\n", acc[0], acc[1], acc[2]);
     a1a:	05 e9       	ldi	r16, 0x95	; 149
     a1c:	11 e0       	ldi	r17, 0x01	; 1
	uart_init();
	io_redirect();
	printf("Done Initializing\n");
	int count = 0;
	while(1){
		ndof_update();
     a1e:	0e 94 a9 04 	call	0x952	; 0x952 <ndof_update>
		float* acc = getAcc	();
     a22:	0e 94 53 03 	call	0x6a6	; 0x6a6 <getAcc>
     a26:	ec 01       	movw	r28, r24
		float* gyr = getGyro();
     a28:	0e 94 8f 03 	call	0x71e	; 0x71e <getGyro>
		float* mag = getMag	();
     a2c:	0e 94 92 03 	call	0x724	; 0x724 <getMag>
		//printf("Update %d: \n", count);
		printf("Accelerometer: %f, %f, %f\n", acc[0], acc[1], acc[2]);
     a30:	8b 85       	ldd	r24, Y+11	; 0x0b
     a32:	8f 93       	push	r24
     a34:	8a 85       	ldd	r24, Y+10	; 0x0a
     a36:	8f 93       	push	r24
     a38:	89 85       	ldd	r24, Y+9	; 0x09
     a3a:	8f 93       	push	r24
     a3c:	88 85       	ldd	r24, Y+8	; 0x08
     a3e:	8f 93       	push	r24
     a40:	8f 81       	ldd	r24, Y+7	; 0x07
     a42:	8f 93       	push	r24
     a44:	8e 81       	ldd	r24, Y+6	; 0x06
     a46:	8f 93       	push	r24
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	8f 93       	push	r24
     a4c:	8c 81       	ldd	r24, Y+4	; 0x04
     a4e:	8f 93       	push	r24
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	8f 93       	push	r24
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	8f 93       	push	r24
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	8f 93       	push	r24
     a5c:	88 81       	ld	r24, Y
     a5e:	8f 93       	push	r24
     a60:	1f 93       	push	r17
     a62:	0f 93       	push	r16
     a64:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printf>
		//printf("Gyroscope    : %f, %f, %f\n", gyr[0], gyr[1], gyr[2]);
		//printf("Magnetometer : %f, %f, %f\n", mag[0], mag[1], mag[2]);
		//printf("\n");	
		//_delay_ms(1000);--
		count++;
	}	
     a68:	8d b7       	in	r24, 0x3d	; 61
     a6a:	9e b7       	in	r25, 0x3e	; 62
     a6c:	0e 96       	adiw	r24, 0x0e	; 14
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	9e bf       	out	0x3e, r25	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	8d bf       	out	0x3d, r24	; 61
     a78:	d2 cf       	rjmp	.-92     	; 0xa1e <testI2C+0x28>

00000a7a <main>:
void testI2C(void);

int main(void)
{
    
	testI2C();
     a7a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <testI2C>

00000a7e <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     a7e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     a82:	88 e4       	ldi	r24, 0x48	; 72
     a84:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     a88:	08 95       	ret

00000a8a <i2c_start_wait>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ec eb       	ldi	r30, 0xBC	; 188
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	24 ea       	ldi	r18, 0xA4	; 164
     a94:	a9 eb       	ldi	r26, 0xB9	; 185
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	cb eb       	ldi	r28, 0xBB	; 187
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
     a9c:	34 e8       	ldi	r19, 0x84	; 132
     a9e:	44 e9       	ldi	r20, 0x94	; 148
     aa0:	20 83       	st	Z, r18
     aa2:	90 81       	ld	r25, Z
     aa4:	99 23       	and	r25, r25
     aa6:	ec f7       	brge	.-6      	; 0xaa2 <i2c_start_wait+0x18>
     aa8:	9c 91       	ld	r25, X
     aaa:	98 7f       	andi	r25, 0xF8	; 248
     aac:	98 30       	cpi	r25, 0x08	; 8
     aae:	11 f0       	breq	.+4      	; 0xab4 <i2c_start_wait+0x2a>
     ab0:	90 31       	cpi	r25, 0x10	; 16
     ab2:	b1 f7       	brne	.-20     	; 0xaa0 <i2c_start_wait+0x16>
     ab4:	88 83       	st	Y, r24
     ab6:	30 83       	st	Z, r19
     ab8:	90 81       	ld	r25, Z
     aba:	99 23       	and	r25, r25
     abc:	ec f7       	brge	.-6      	; 0xab8 <i2c_start_wait+0x2e>
     abe:	9c 91       	ld	r25, X
     ac0:	98 7f       	andi	r25, 0xF8	; 248
     ac2:	90 32       	cpi	r25, 0x20	; 32
     ac4:	11 f0       	breq	.+4      	; 0xaca <i2c_start_wait+0x40>
     ac6:	98 35       	cpi	r25, 0x58	; 88
     ac8:	29 f4       	brne	.+10     	; 0xad4 <i2c_start_wait+0x4a>
     aca:	40 83       	st	Z, r20
     acc:	90 81       	ld	r25, Z
     ace:	94 fd       	sbrc	r25, 4
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <i2c_start_wait+0x42>
     ad2:	e6 cf       	rjmp	.-52     	; 0xaa0 <i2c_start_wait+0x16>
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ada:	84 e9       	ldi	r24, 0x94	; 148
     adc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     ae0:	ec eb       	ldi	r30, 0xBC	; 188
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	84 fd       	sbrc	r24, 4
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <i2c_stop+0xa>

}/* i2c_stop */
     aea:	08 95       	ret

00000aec <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
		
	// send data to the previously addressed device
	TWDR = data;
     aec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     af0:	84 e8       	ldi	r24, 0x84	; 132
     af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     af6:	ec eb       	ldi	r30, 0xBC	; 188
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	88 23       	and	r24, r24
     afe:	ec f7       	brge	.-6      	; 0xafa <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     b00:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b04:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	98 32       	cpi	r25, 0x28	; 40
     b0a:	09 f4       	brne	.+2      	; 0xb0e <i2c_write+0x22>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     b0e:	08 95       	ret

00000b10 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     b10:	84 ec       	ldi	r24, 0xC4	; 196
     b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
     b16:	ec eb       	ldi	r30, 0xBC	; 188
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	88 23       	and	r24, r24
     b1e:	ec f7       	brge	.-6      	; 0xb1a <i2c_readAck+0xa>

    return TWDR;
     b20:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
     b24:	08 95       	ret

00000b26 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     b26:	84 e8       	ldi	r24, 0x84	; 132
     b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     b2c:	ec eb       	ldi	r30, 0xBC	; 188
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	88 23       	and	r24, r24
     b34:	ec f7       	brge	.-6      	; 0xb30 <i2c_readNak+0xa>
	
    return TWDR;
     b36:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     b3a:	08 95       	ret

00000b3c <uart_putchar>:
	stdout = &uart_output;	//redirect standard output to uart
	stdin  = &uart_input;  //redirect standard input to uart
}


void uart_putchar(char c, FILE *stream) {
     b3c:	cf 93       	push	r28
     b3e:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     b40:	8a 30       	cpi	r24, 0x0A	; 10
     b42:	19 f4       	brne	.+6      	; 0xb4a <uart_putchar+0xe>
		uart_putchar('\r', stream);
     b44:	8d e0       	ldi	r24, 0x0D	; 13
     b46:	0e 94 9e 05 	call	0xb3c	; 0xb3c <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     b4a:	e0 ec       	ldi	r30, 0xC0	; 192
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	90 81       	ld	r25, Z
     b50:	95 ff       	sbrs	r25, 5
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <uart_putchar+0x12>
	UDR0 = c;
     b54:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     b5c:	e0 ec       	ldi	r30, 0xC0	; 192
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	88 23       	and	r24, r24
     b64:	ec f7       	brge	.-6      	; 0xb60 <uart_getchar+0x4>
	return UDR0;
     b66:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     b6a:	08 95       	ret

00000b6c <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
     b6c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     b70:	87 e6       	ldi	r24, 0x67	; 103
     b72:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     b76:	e0 ec       	ldi	r30, 0xC0	; 192
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8d 7f       	andi	r24, 0xFD	; 253
     b7e:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     b80:	86 e0       	ldi	r24, 0x06	; 6
     b82:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     b86:	88 e1       	ldi	r24, 0x18	; 24
     b88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b8c:	08 95       	ret

00000b8e <io_redirect>:
}

void io_redirect(void){
	
	
	stdout = &uart_output;	//redirect standard output to uart
     b8e:	e0 e1       	ldi	r30, 0x10	; 16
     b90:	f2 e0       	ldi	r31, 0x02	; 2
     b92:	80 e1       	ldi	r24, 0x10	; 16
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	93 83       	std	Z+3, r25	; 0x03
     b98:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;  //redirect standard input to uart
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <__subsf3>:
     ba4:	50 58       	subi	r21, 0x80	; 128

00000ba6 <__addsf3>:
     ba6:	bb 27       	eor	r27, r27
     ba8:	aa 27       	eor	r26, r26
     baa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__addsf3x>
     bae:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__fp_round>
     bb2:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscA>
     bb6:	38 f0       	brcs	.+14     	; 0xbc6 <__addsf3+0x20>
     bb8:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscB>
     bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__addsf3+0x20>
     bbe:	39 f4       	brne	.+14     	; 0xbce <__addsf3+0x28>
     bc0:	9f 3f       	cpi	r25, 0xFF	; 255
     bc2:	19 f4       	brne	.+6      	; 0xbca <__addsf3+0x24>
     bc4:	26 f4       	brtc	.+8      	; 0xbce <__addsf3+0x28>
     bc6:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_nan>
     bca:	0e f4       	brtc	.+2      	; 0xbce <__addsf3+0x28>
     bcc:	e0 95       	com	r30
     bce:	e7 fb       	bst	r30, 7
     bd0:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_inf>

00000bd4 <__addsf3x>:
     bd4:	e9 2f       	mov	r30, r25
     bd6:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_split3>
     bda:	58 f3       	brcs	.-42     	; 0xbb2 <__addsf3+0xc>
     bdc:	ba 17       	cp	r27, r26
     bde:	62 07       	cpc	r22, r18
     be0:	73 07       	cpc	r23, r19
     be2:	84 07       	cpc	r24, r20
     be4:	95 07       	cpc	r25, r21
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <__addsf3x+0x1c>
     be8:	79 f4       	brne	.+30     	; 0xc08 <__addsf3x+0x34>
     bea:	a6 f5       	brtc	.+104    	; 0xc54 <__addsf3x+0x80>
     bec:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_zero>
     bf0:	0e f4       	brtc	.+2      	; 0xbf4 <__addsf3x+0x20>
     bf2:	e0 95       	com	r30
     bf4:	0b 2e       	mov	r0, r27
     bf6:	ba 2f       	mov	r27, r26
     bf8:	a0 2d       	mov	r26, r0
     bfa:	0b 01       	movw	r0, r22
     bfc:	b9 01       	movw	r22, r18
     bfe:	90 01       	movw	r18, r0
     c00:	0c 01       	movw	r0, r24
     c02:	ca 01       	movw	r24, r20
     c04:	a0 01       	movw	r20, r0
     c06:	11 24       	eor	r1, r1
     c08:	ff 27       	eor	r31, r31
     c0a:	59 1b       	sub	r21, r25
     c0c:	99 f0       	breq	.+38     	; 0xc34 <__addsf3x+0x60>
     c0e:	59 3f       	cpi	r21, 0xF9	; 249
     c10:	50 f4       	brcc	.+20     	; 0xc26 <__addsf3x+0x52>
     c12:	50 3e       	cpi	r21, 0xE0	; 224
     c14:	68 f1       	brcs	.+90     	; 0xc70 <__addsf3x+0x9c>
     c16:	1a 16       	cp	r1, r26
     c18:	f0 40       	sbci	r31, 0x00	; 0
     c1a:	a2 2f       	mov	r26, r18
     c1c:	23 2f       	mov	r18, r19
     c1e:	34 2f       	mov	r19, r20
     c20:	44 27       	eor	r20, r20
     c22:	58 5f       	subi	r21, 0xF8	; 248
     c24:	f3 cf       	rjmp	.-26     	; 0xc0c <__addsf3x+0x38>
     c26:	46 95       	lsr	r20
     c28:	37 95       	ror	r19
     c2a:	27 95       	ror	r18
     c2c:	a7 95       	ror	r26
     c2e:	f0 40       	sbci	r31, 0x00	; 0
     c30:	53 95       	inc	r21
     c32:	c9 f7       	brne	.-14     	; 0xc26 <__addsf3x+0x52>
     c34:	7e f4       	brtc	.+30     	; 0xc54 <__addsf3x+0x80>
     c36:	1f 16       	cp	r1, r31
     c38:	ba 0b       	sbc	r27, r26
     c3a:	62 0b       	sbc	r22, r18
     c3c:	73 0b       	sbc	r23, r19
     c3e:	84 0b       	sbc	r24, r20
     c40:	ba f0       	brmi	.+46     	; 0xc70 <__addsf3x+0x9c>
     c42:	91 50       	subi	r25, 0x01	; 1
     c44:	a1 f0       	breq	.+40     	; 0xc6e <__addsf3x+0x9a>
     c46:	ff 0f       	add	r31, r31
     c48:	bb 1f       	adc	r27, r27
     c4a:	66 1f       	adc	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	c2 f7       	brpl	.-16     	; 0xc42 <__addsf3x+0x6e>
     c52:	0e c0       	rjmp	.+28     	; 0xc70 <__addsf3x+0x9c>
     c54:	ba 0f       	add	r27, r26
     c56:	62 1f       	adc	r22, r18
     c58:	73 1f       	adc	r23, r19
     c5a:	84 1f       	adc	r24, r20
     c5c:	48 f4       	brcc	.+18     	; 0xc70 <__addsf3x+0x9c>
     c5e:	87 95       	ror	r24
     c60:	77 95       	ror	r23
     c62:	67 95       	ror	r22
     c64:	b7 95       	ror	r27
     c66:	f7 95       	ror	r31
     c68:	9e 3f       	cpi	r25, 0xFE	; 254
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <__addsf3x+0x9a>
     c6c:	b0 cf       	rjmp	.-160    	; 0xbce <__addsf3+0x28>
     c6e:	93 95       	inc	r25
     c70:	88 0f       	add	r24, r24
     c72:	08 f0       	brcs	.+2      	; 0xc76 <__addsf3x+0xa2>
     c74:	99 27       	eor	r25, r25
     c76:	ee 0f       	add	r30, r30
     c78:	97 95       	ror	r25
     c7a:	87 95       	ror	r24
     c7c:	08 95       	ret

00000c7e <__cmpsf2>:
     c7e:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_cmp>
     c82:	08 f4       	brcc	.+2      	; 0xc86 <__cmpsf2+0x8>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	08 95       	ret

00000c88 <__divsf3>:
     c88:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__divsf3x>
     c8c:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__fp_round>
     c90:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscB>
     c94:	58 f0       	brcs	.+22     	; 0xcac <__divsf3+0x24>
     c96:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscA>
     c9a:	40 f0       	brcs	.+16     	; 0xcac <__divsf3+0x24>
     c9c:	29 f4       	brne	.+10     	; 0xca8 <__divsf3+0x20>
     c9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ca0:	29 f0       	breq	.+10     	; 0xcac <__divsf3+0x24>
     ca2:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_inf>
     ca6:	51 11       	cpse	r21, r1
     ca8:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_szero>
     cac:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_nan>

00000cb0 <__divsf3x>:
     cb0:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_split3>
     cb4:	68 f3       	brcs	.-38     	; 0xc90 <__divsf3+0x8>

00000cb6 <__divsf3_pse>:
     cb6:	99 23       	and	r25, r25
     cb8:	b1 f3       	breq	.-20     	; 0xca6 <__divsf3+0x1e>
     cba:	55 23       	and	r21, r21
     cbc:	91 f3       	breq	.-28     	; 0xca2 <__divsf3+0x1a>
     cbe:	95 1b       	sub	r25, r21
     cc0:	55 0b       	sbc	r21, r21
     cc2:	bb 27       	eor	r27, r27
     cc4:	aa 27       	eor	r26, r26
     cc6:	62 17       	cp	r22, r18
     cc8:	73 07       	cpc	r23, r19
     cca:	84 07       	cpc	r24, r20
     ccc:	38 f0       	brcs	.+14     	; 0xcdc <__divsf3_pse+0x26>
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	44 1f       	adc	r20, r20
     cd8:	aa 1f       	adc	r26, r26
     cda:	a9 f3       	breq	.-22     	; 0xcc6 <__divsf3_pse+0x10>
     cdc:	35 d0       	rcall	.+106    	; 0xd48 <__divsf3_pse+0x92>
     cde:	0e 2e       	mov	r0, r30
     ce0:	3a f0       	brmi	.+14     	; 0xcf0 <__divsf3_pse+0x3a>
     ce2:	e0 e8       	ldi	r30, 0x80	; 128
     ce4:	32 d0       	rcall	.+100    	; 0xd4a <__divsf3_pse+0x94>
     ce6:	91 50       	subi	r25, 0x01	; 1
     ce8:	50 40       	sbci	r21, 0x00	; 0
     cea:	e6 95       	lsr	r30
     cec:	00 1c       	adc	r0, r0
     cee:	ca f7       	brpl	.-14     	; 0xce2 <__divsf3_pse+0x2c>
     cf0:	2b d0       	rcall	.+86     	; 0xd48 <__divsf3_pse+0x92>
     cf2:	fe 2f       	mov	r31, r30
     cf4:	29 d0       	rcall	.+82     	; 0xd48 <__divsf3_pse+0x92>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	bb 1f       	adc	r27, r27
     cfe:	26 17       	cp	r18, r22
     d00:	37 07       	cpc	r19, r23
     d02:	48 07       	cpc	r20, r24
     d04:	ab 07       	cpc	r26, r27
     d06:	b0 e8       	ldi	r27, 0x80	; 128
     d08:	09 f0       	breq	.+2      	; 0xd0c <__divsf3_pse+0x56>
     d0a:	bb 0b       	sbc	r27, r27
     d0c:	80 2d       	mov	r24, r0
     d0e:	bf 01       	movw	r22, r30
     d10:	ff 27       	eor	r31, r31
     d12:	93 58       	subi	r25, 0x83	; 131
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	3a f0       	brmi	.+14     	; 0xd26 <__divsf3_pse+0x70>
     d18:	9e 3f       	cpi	r25, 0xFE	; 254
     d1a:	51 05       	cpc	r21, r1
     d1c:	78 f0       	brcs	.+30     	; 0xd3c <__divsf3_pse+0x86>
     d1e:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_inf>
     d22:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_szero>
     d26:	5f 3f       	cpi	r21, 0xFF	; 255
     d28:	e4 f3       	brlt	.-8      	; 0xd22 <__divsf3_pse+0x6c>
     d2a:	98 3e       	cpi	r25, 0xE8	; 232
     d2c:	d4 f3       	brlt	.-12     	; 0xd22 <__divsf3_pse+0x6c>
     d2e:	86 95       	lsr	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9f 5f       	subi	r25, 0xFF	; 255
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <__divsf3_pse+0x78>
     d3c:	88 0f       	add	r24, r24
     d3e:	91 1d       	adc	r25, r1
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	97 f9       	bld	r25, 7
     d46:	08 95       	ret
     d48:	e1 e0       	ldi	r30, 0x01	; 1
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	bb 1f       	adc	r27, r27
     d52:	62 17       	cp	r22, r18
     d54:	73 07       	cpc	r23, r19
     d56:	84 07       	cpc	r24, r20
     d58:	ba 07       	cpc	r27, r26
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <__divsf3_pse+0xae>
     d5c:	62 1b       	sub	r22, r18
     d5e:	73 0b       	sbc	r23, r19
     d60:	84 0b       	sbc	r24, r20
     d62:	ba 0b       	sbc	r27, r26
     d64:	ee 1f       	adc	r30, r30
     d66:	88 f7       	brcc	.-30     	; 0xd4a <__divsf3_pse+0x94>
     d68:	e0 95       	com	r30
     d6a:	08 95       	ret

00000d6c <__fixsfsi>:
     d6c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__fixunssfsi>
     d70:	68 94       	set
     d72:	b1 11       	cpse	r27, r1
     d74:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_szero>
     d78:	08 95       	ret

00000d7a <__fixunssfsi>:
     d7a:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_splitA>
     d7e:	88 f0       	brcs	.+34     	; 0xda2 <__fixunssfsi+0x28>
     d80:	9f 57       	subi	r25, 0x7F	; 127
     d82:	98 f0       	brcs	.+38     	; 0xdaa <__fixunssfsi+0x30>
     d84:	b9 2f       	mov	r27, r25
     d86:	99 27       	eor	r25, r25
     d88:	b7 51       	subi	r27, 0x17	; 23
     d8a:	b0 f0       	brcs	.+44     	; 0xdb8 <__fixunssfsi+0x3e>
     d8c:	e1 f0       	breq	.+56     	; 0xdc6 <__fixunssfsi+0x4c>
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	1a f0       	brmi	.+6      	; 0xd9e <__fixunssfsi+0x24>
     d98:	ba 95       	dec	r27
     d9a:	c9 f7       	brne	.-14     	; 0xd8e <__fixunssfsi+0x14>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <__fixunssfsi+0x4c>
     d9e:	b1 30       	cpi	r27, 0x01	; 1
     da0:	91 f0       	breq	.+36     	; 0xdc6 <__fixunssfsi+0x4c>
     da2:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fp_zero>
     da6:	b1 e0       	ldi	r27, 0x01	; 1
     da8:	08 95       	ret
     daa:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_zero>
     dae:	67 2f       	mov	r22, r23
     db0:	78 2f       	mov	r23, r24
     db2:	88 27       	eor	r24, r24
     db4:	b8 5f       	subi	r27, 0xF8	; 248
     db6:	39 f0       	breq	.+14     	; 0xdc6 <__fixunssfsi+0x4c>
     db8:	b9 3f       	cpi	r27, 0xF9	; 249
     dba:	cc f3       	brlt	.-14     	; 0xdae <__fixunssfsi+0x34>
     dbc:	86 95       	lsr	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b3 95       	inc	r27
     dc4:	d9 f7       	brne	.-10     	; 0xdbc <__fixunssfsi+0x42>
     dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__fixunssfsi+0x5c>
     dc8:	90 95       	com	r25
     dca:	80 95       	com	r24
     dcc:	70 95       	com	r23
     dce:	61 95       	neg	r22
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	08 95       	ret

00000dd8 <__floatunsisf>:
     dd8:	e8 94       	clt
     dda:	09 c0       	rjmp	.+18     	; 0xdee <__floatsisf+0x12>

00000ddc <__floatsisf>:
     ddc:	97 fb       	bst	r25, 7
     dde:	3e f4       	brtc	.+14     	; 0xdee <__floatsisf+0x12>
     de0:	90 95       	com	r25
     de2:	80 95       	com	r24
     de4:	70 95       	com	r23
     de6:	61 95       	neg	r22
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	8f 4f       	sbci	r24, 0xFF	; 255
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	99 23       	and	r25, r25
     df0:	a9 f0       	breq	.+42     	; 0xe1c <__floatsisf+0x40>
     df2:	f9 2f       	mov	r31, r25
     df4:	96 e9       	ldi	r25, 0x96	; 150
     df6:	bb 27       	eor	r27, r27
     df8:	93 95       	inc	r25
     dfa:	f6 95       	lsr	r31
     dfc:	87 95       	ror	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b7 95       	ror	r27
     e04:	f1 11       	cpse	r31, r1
     e06:	f8 cf       	rjmp	.-16     	; 0xdf8 <__floatsisf+0x1c>
     e08:	fa f4       	brpl	.+62     	; 0xe48 <__floatsisf+0x6c>
     e0a:	bb 0f       	add	r27, r27
     e0c:	11 f4       	brne	.+4      	; 0xe12 <__floatsisf+0x36>
     e0e:	60 ff       	sbrs	r22, 0
     e10:	1b c0       	rjmp	.+54     	; 0xe48 <__floatsisf+0x6c>
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <__floatsisf+0x6c>
     e1c:	88 23       	and	r24, r24
     e1e:	11 f0       	breq	.+4      	; 0xe24 <__floatsisf+0x48>
     e20:	96 e9       	ldi	r25, 0x96	; 150
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <__floatsisf+0x6a>
     e24:	77 23       	and	r23, r23
     e26:	21 f0       	breq	.+8      	; 0xe30 <__floatsisf+0x54>
     e28:	9e e8       	ldi	r25, 0x8E	; 142
     e2a:	87 2f       	mov	r24, r23
     e2c:	76 2f       	mov	r23, r22
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__floatsisf+0x5e>
     e30:	66 23       	and	r22, r22
     e32:	71 f0       	breq	.+28     	; 0xe50 <__floatsisf+0x74>
     e34:	96 e8       	ldi	r25, 0x86	; 134
     e36:	86 2f       	mov	r24, r22
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	2a f0       	brmi	.+10     	; 0xe48 <__floatsisf+0x6c>
     e3e:	9a 95       	dec	r25
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	da f7       	brpl	.-10     	; 0xe3e <__floatsisf+0x62>
     e48:	88 0f       	add	r24, r24
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret

00000e52 <__fp_cmp>:
     e52:	99 0f       	add	r25, r25
     e54:	00 08       	sbc	r0, r0
     e56:	55 0f       	add	r21, r21
     e58:	aa 0b       	sbc	r26, r26
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	fe ef       	ldi	r31, 0xFE	; 254
     e5e:	16 16       	cp	r1, r22
     e60:	17 06       	cpc	r1, r23
     e62:	e8 07       	cpc	r30, r24
     e64:	f9 07       	cpc	r31, r25
     e66:	c0 f0       	brcs	.+48     	; 0xe98 <__fp_cmp+0x46>
     e68:	12 16       	cp	r1, r18
     e6a:	13 06       	cpc	r1, r19
     e6c:	e4 07       	cpc	r30, r20
     e6e:	f5 07       	cpc	r31, r21
     e70:	98 f0       	brcs	.+38     	; 0xe98 <__fp_cmp+0x46>
     e72:	62 1b       	sub	r22, r18
     e74:	73 0b       	sbc	r23, r19
     e76:	84 0b       	sbc	r24, r20
     e78:	95 0b       	sbc	r25, r21
     e7a:	39 f4       	brne	.+14     	; 0xe8a <__fp_cmp+0x38>
     e7c:	0a 26       	eor	r0, r26
     e7e:	61 f0       	breq	.+24     	; 0xe98 <__fp_cmp+0x46>
     e80:	23 2b       	or	r18, r19
     e82:	24 2b       	or	r18, r20
     e84:	25 2b       	or	r18, r21
     e86:	21 f4       	brne	.+8      	; 0xe90 <__fp_cmp+0x3e>
     e88:	08 95       	ret
     e8a:	0a 26       	eor	r0, r26
     e8c:	09 f4       	brne	.+2      	; 0xe90 <__fp_cmp+0x3e>
     e8e:	a1 40       	sbci	r26, 0x01	; 1
     e90:	a6 95       	lsr	r26
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	81 1d       	adc	r24, r1
     e96:	81 1d       	adc	r24, r1
     e98:	08 95       	ret

00000e9a <__fp_inf>:
     e9a:	97 f9       	bld	r25, 7
     e9c:	9f 67       	ori	r25, 0x7F	; 127
     e9e:	80 e8       	ldi	r24, 0x80	; 128
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	08 95       	ret

00000ea6 <__fp_nan>:
     ea6:	9f ef       	ldi	r25, 0xFF	; 255
     ea8:	80 ec       	ldi	r24, 0xC0	; 192
     eaa:	08 95       	ret

00000eac <__fp_pscA>:
     eac:	00 24       	eor	r0, r0
     eae:	0a 94       	dec	r0
     eb0:	16 16       	cp	r1, r22
     eb2:	17 06       	cpc	r1, r23
     eb4:	18 06       	cpc	r1, r24
     eb6:	09 06       	cpc	r0, r25
     eb8:	08 95       	ret

00000eba <__fp_pscB>:
     eba:	00 24       	eor	r0, r0
     ebc:	0a 94       	dec	r0
     ebe:	12 16       	cp	r1, r18
     ec0:	13 06       	cpc	r1, r19
     ec2:	14 06       	cpc	r1, r20
     ec4:	05 06       	cpc	r0, r21
     ec6:	08 95       	ret

00000ec8 <__fp_round>:
     ec8:	09 2e       	mov	r0, r25
     eca:	03 94       	inc	r0
     ecc:	00 0c       	add	r0, r0
     ece:	11 f4       	brne	.+4      	; 0xed4 <__fp_round+0xc>
     ed0:	88 23       	and	r24, r24
     ed2:	52 f0       	brmi	.+20     	; 0xee8 <__fp_round+0x20>
     ed4:	bb 0f       	add	r27, r27
     ed6:	40 f4       	brcc	.+16     	; 0xee8 <__fp_round+0x20>
     ed8:	bf 2b       	or	r27, r31
     eda:	11 f4       	brne	.+4      	; 0xee0 <__fp_round+0x18>
     edc:	60 ff       	sbrs	r22, 0
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <__fp_round+0x20>
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	08 95       	ret

00000eea <__fp_split3>:
     eea:	57 fd       	sbrc	r21, 7
     eec:	90 58       	subi	r25, 0x80	; 128
     eee:	44 0f       	add	r20, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	59 f0       	breq	.+22     	; 0xf0a <__fp_splitA+0x10>
     ef4:	5f 3f       	cpi	r21, 0xFF	; 255
     ef6:	71 f0       	breq	.+28     	; 0xf14 <__fp_splitA+0x1a>
     ef8:	47 95       	ror	r20

00000efa <__fp_splitA>:
     efa:	88 0f       	add	r24, r24
     efc:	97 fb       	bst	r25, 7
     efe:	99 1f       	adc	r25, r25
     f00:	61 f0       	breq	.+24     	; 0xf1a <__fp_splitA+0x20>
     f02:	9f 3f       	cpi	r25, 0xFF	; 255
     f04:	79 f0       	breq	.+30     	; 0xf24 <__fp_splitA+0x2a>
     f06:	87 95       	ror	r24
     f08:	08 95       	ret
     f0a:	12 16       	cp	r1, r18
     f0c:	13 06       	cpc	r1, r19
     f0e:	14 06       	cpc	r1, r20
     f10:	55 1f       	adc	r21, r21
     f12:	f2 cf       	rjmp	.-28     	; 0xef8 <__fp_split3+0xe>
     f14:	46 95       	lsr	r20
     f16:	f1 df       	rcall	.-30     	; 0xefa <__fp_splitA>
     f18:	08 c0       	rjmp	.+16     	; 0xf2a <__fp_splitA+0x30>
     f1a:	16 16       	cp	r1, r22
     f1c:	17 06       	cpc	r1, r23
     f1e:	18 06       	cpc	r1, r24
     f20:	99 1f       	adc	r25, r25
     f22:	f1 cf       	rjmp	.-30     	; 0xf06 <__fp_splitA+0xc>
     f24:	86 95       	lsr	r24
     f26:	71 05       	cpc	r23, r1
     f28:	61 05       	cpc	r22, r1
     f2a:	08 94       	sec
     f2c:	08 95       	ret

00000f2e <__fp_zero>:
     f2e:	e8 94       	clt

00000f30 <__fp_szero>:
     f30:	bb 27       	eor	r27, r27
     f32:	66 27       	eor	r22, r22
     f34:	77 27       	eor	r23, r23
     f36:	cb 01       	movw	r24, r22
     f38:	97 f9       	bld	r25, 7
     f3a:	08 95       	ret

00000f3c <__gesf2>:
     f3c:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_cmp>
     f40:	08 f4       	brcc	.+2      	; 0xf44 <__gesf2+0x8>
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__mulsf3>:
     f46:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__mulsf3x>
     f4a:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__fp_round>
     f4e:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_pscA>
     f52:	38 f0       	brcs	.+14     	; 0xf62 <__mulsf3+0x1c>
     f54:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscB>
     f58:	20 f0       	brcs	.+8      	; 0xf62 <__mulsf3+0x1c>
     f5a:	95 23       	and	r25, r21
     f5c:	11 f0       	breq	.+4      	; 0xf62 <__mulsf3+0x1c>
     f5e:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_inf>
     f62:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_nan>
     f66:	11 24       	eor	r1, r1
     f68:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_szero>

00000f6c <__mulsf3x>:
     f6c:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_split3>
     f70:	70 f3       	brcs	.-36     	; 0xf4e <__mulsf3+0x8>

00000f72 <__mulsf3_pse>:
     f72:	95 9f       	mul	r25, r21
     f74:	c1 f3       	breq	.-16     	; 0xf66 <__mulsf3+0x20>
     f76:	95 0f       	add	r25, r21
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	55 1f       	adc	r21, r21
     f7c:	62 9f       	mul	r22, r18
     f7e:	f0 01       	movw	r30, r0
     f80:	72 9f       	mul	r23, r18
     f82:	bb 27       	eor	r27, r27
     f84:	f0 0d       	add	r31, r0
     f86:	b1 1d       	adc	r27, r1
     f88:	63 9f       	mul	r22, r19
     f8a:	aa 27       	eor	r26, r26
     f8c:	f0 0d       	add	r31, r0
     f8e:	b1 1d       	adc	r27, r1
     f90:	aa 1f       	adc	r26, r26
     f92:	64 9f       	mul	r22, r20
     f94:	66 27       	eor	r22, r22
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	66 1f       	adc	r22, r22
     f9c:	82 9f       	mul	r24, r18
     f9e:	22 27       	eor	r18, r18
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	62 1f       	adc	r22, r18
     fa6:	73 9f       	mul	r23, r19
     fa8:	b0 0d       	add	r27, r0
     faa:	a1 1d       	adc	r26, r1
     fac:	62 1f       	adc	r22, r18
     fae:	83 9f       	mul	r24, r19
     fb0:	a0 0d       	add	r26, r0
     fb2:	61 1d       	adc	r22, r1
     fb4:	22 1f       	adc	r18, r18
     fb6:	74 9f       	mul	r23, r20
     fb8:	33 27       	eor	r19, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	23 1f       	adc	r18, r19
     fc0:	84 9f       	mul	r24, r20
     fc2:	60 0d       	add	r22, r0
     fc4:	21 1d       	adc	r18, r1
     fc6:	82 2f       	mov	r24, r18
     fc8:	76 2f       	mov	r23, r22
     fca:	6a 2f       	mov	r22, r26
     fcc:	11 24       	eor	r1, r1
     fce:	9f 57       	subi	r25, 0x7F	; 127
     fd0:	50 40       	sbci	r21, 0x00	; 0
     fd2:	9a f0       	brmi	.+38     	; 0xffa <__mulsf3_pse+0x88>
     fd4:	f1 f0       	breq	.+60     	; 0x1012 <__mulsf3_pse+0xa0>
     fd6:	88 23       	and	r24, r24
     fd8:	4a f0       	brmi	.+18     	; 0xfec <__mulsf3_pse+0x7a>
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	bb 1f       	adc	r27, r27
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	91 50       	subi	r25, 0x01	; 1
     fe8:	50 40       	sbci	r21, 0x00	; 0
     fea:	a9 f7       	brne	.-22     	; 0xfd6 <__mulsf3_pse+0x64>
     fec:	9e 3f       	cpi	r25, 0xFE	; 254
     fee:	51 05       	cpc	r21, r1
     ff0:	80 f0       	brcs	.+32     	; 0x1012 <__mulsf3_pse+0xa0>
     ff2:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_inf>
     ff6:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_szero>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	e4 f3       	brlt	.-8      	; 0xff6 <__mulsf3_pse+0x84>
     ffe:	98 3e       	cpi	r25, 0xE8	; 232
    1000:	d4 f3       	brlt	.-12     	; 0xff6 <__mulsf3_pse+0x84>
    1002:	86 95       	lsr	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	b7 95       	ror	r27
    100a:	f7 95       	ror	r31
    100c:	e7 95       	ror	r30
    100e:	9f 5f       	subi	r25, 0xFF	; 255
    1010:	c1 f7       	brne	.-16     	; 0x1002 <__mulsf3_pse+0x90>
    1012:	fe 2b       	or	r31, r30
    1014:	88 0f       	add	r24, r24
    1016:	91 1d       	adc	r25, r1
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	97 f9       	bld	r25, 7
    101e:	08 95       	ret

00001020 <vfprintf>:
    1020:	a3 e1       	ldi	r26, 0x13	; 19
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e1       	ldi	r30, 0x16	; 22
    1026:	f8 e0       	ldi	r31, 0x08	; 8
    1028:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__prologue_saves__>
    102c:	6c 01       	movw	r12, r24
    102e:	4b 01       	movw	r8, r22
    1030:	2a 01       	movw	r4, r20
    1032:	fc 01       	movw	r30, r24
    1034:	17 82       	std	Z+7, r1	; 0x07
    1036:	16 82       	std	Z+6, r1	; 0x06
    1038:	83 81       	ldd	r24, Z+3	; 0x03
    103a:	81 ff       	sbrs	r24, 1
    103c:	43 c3       	rjmp	.+1670   	; 0x16c4 <vfprintf+0x6a4>
    103e:	ae 01       	movw	r20, r28
    1040:	4f 5f       	subi	r20, 0xFF	; 255
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	3a 01       	movw	r6, r20
    1046:	f6 01       	movw	r30, r12
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	f4 01       	movw	r30, r8
    104c:	93 fd       	sbrc	r25, 3
    104e:	85 91       	lpm	r24, Z+
    1050:	93 ff       	sbrs	r25, 3
    1052:	81 91       	ld	r24, Z+
    1054:	4f 01       	movw	r8, r30
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <vfprintf+0x3c>
    105a:	30 c3       	rjmp	.+1632   	; 0x16bc <vfprintf+0x69c>
    105c:	85 32       	cpi	r24, 0x25	; 37
    105e:	39 f4       	brne	.+14     	; 0x106e <vfprintf+0x4e>
    1060:	93 fd       	sbrc	r25, 3
    1062:	85 91       	lpm	r24, Z+
    1064:	93 ff       	sbrs	r25, 3
    1066:	81 91       	ld	r24, Z+
    1068:	4f 01       	movw	r8, r30
    106a:	85 32       	cpi	r24, 0x25	; 37
    106c:	39 f4       	brne	.+14     	; 0x107c <vfprintf+0x5c>
    106e:	b6 01       	movw	r22, r12
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1076:	52 01       	movw	r10, r4
    1078:	25 01       	movw	r4, r10
    107a:	e5 cf       	rjmp	.-54     	; 0x1046 <vfprintf+0x26>
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	f1 2c       	mov	r15, r1
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	20 32       	cpi	r18, 0x20	; 32
    1084:	a0 f4       	brcc	.+40     	; 0x10ae <vfprintf+0x8e>
    1086:	8b 32       	cpi	r24, 0x2B	; 43
    1088:	69 f0       	breq	.+26     	; 0x10a4 <vfprintf+0x84>
    108a:	30 f4       	brcc	.+12     	; 0x1098 <vfprintf+0x78>
    108c:	80 32       	cpi	r24, 0x20	; 32
    108e:	59 f0       	breq	.+22     	; 0x10a6 <vfprintf+0x86>
    1090:	83 32       	cpi	r24, 0x23	; 35
    1092:	69 f4       	brne	.+26     	; 0x10ae <vfprintf+0x8e>
    1094:	20 61       	ori	r18, 0x10	; 16
    1096:	2c c0       	rjmp	.+88     	; 0x10f0 <vfprintf+0xd0>
    1098:	8d 32       	cpi	r24, 0x2D	; 45
    109a:	39 f0       	breq	.+14     	; 0x10aa <vfprintf+0x8a>
    109c:	80 33       	cpi	r24, 0x30	; 48
    109e:	39 f4       	brne	.+14     	; 0x10ae <vfprintf+0x8e>
    10a0:	21 60       	ori	r18, 0x01	; 1
    10a2:	26 c0       	rjmp	.+76     	; 0x10f0 <vfprintf+0xd0>
    10a4:	22 60       	ori	r18, 0x02	; 2
    10a6:	24 60       	ori	r18, 0x04	; 4
    10a8:	23 c0       	rjmp	.+70     	; 0x10f0 <vfprintf+0xd0>
    10aa:	28 60       	ori	r18, 0x08	; 8
    10ac:	21 c0       	rjmp	.+66     	; 0x10f0 <vfprintf+0xd0>
    10ae:	27 fd       	sbrc	r18, 7
    10b0:	27 c0       	rjmp	.+78     	; 0x1100 <vfprintf+0xe0>
    10b2:	30 ed       	ldi	r19, 0xD0	; 208
    10b4:	38 0f       	add	r19, r24
    10b6:	3a 30       	cpi	r19, 0x0A	; 10
    10b8:	78 f4       	brcc	.+30     	; 0x10d8 <vfprintf+0xb8>
    10ba:	26 ff       	sbrs	r18, 6
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0xaa>
    10be:	fa e0       	ldi	r31, 0x0A	; 10
    10c0:	1f 9f       	mul	r17, r31
    10c2:	30 0d       	add	r19, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	13 2f       	mov	r17, r19
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <vfprintf+0xd0>
    10ca:	4a e0       	ldi	r20, 0x0A	; 10
    10cc:	f4 9e       	mul	r15, r20
    10ce:	30 0d       	add	r19, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	f3 2e       	mov	r15, r19
    10d4:	20 62       	ori	r18, 0x20	; 32
    10d6:	0c c0       	rjmp	.+24     	; 0x10f0 <vfprintf+0xd0>
    10d8:	8e 32       	cpi	r24, 0x2E	; 46
    10da:	21 f4       	brne	.+8      	; 0x10e4 <vfprintf+0xc4>
    10dc:	26 fd       	sbrc	r18, 6
    10de:	ee c2       	rjmp	.+1500   	; 0x16bc <vfprintf+0x69c>
    10e0:	20 64       	ori	r18, 0x40	; 64
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0xd0>
    10e4:	8c 36       	cpi	r24, 0x6C	; 108
    10e6:	11 f4       	brne	.+4      	; 0x10ec <vfprintf+0xcc>
    10e8:	20 68       	ori	r18, 0x80	; 128
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0xd0>
    10ec:	88 36       	cpi	r24, 0x68	; 104
    10ee:	41 f4       	brne	.+16     	; 0x1100 <vfprintf+0xe0>
    10f0:	f4 01       	movw	r30, r8
    10f2:	93 fd       	sbrc	r25, 3
    10f4:	85 91       	lpm	r24, Z+
    10f6:	93 ff       	sbrs	r25, 3
    10f8:	81 91       	ld	r24, Z+
    10fa:	4f 01       	movw	r8, r30
    10fc:	81 11       	cpse	r24, r1
    10fe:	c1 cf       	rjmp	.-126    	; 0x1082 <vfprintf+0x62>
    1100:	9b eb       	ldi	r25, 0xBB	; 187
    1102:	98 0f       	add	r25, r24
    1104:	93 30       	cpi	r25, 0x03	; 3
    1106:	18 f4       	brcc	.+6      	; 0x110e <vfprintf+0xee>
    1108:	20 61       	ori	r18, 0x10	; 16
    110a:	80 5e       	subi	r24, 0xE0	; 224
    110c:	06 c0       	rjmp	.+12     	; 0x111a <vfprintf+0xfa>
    110e:	9b e9       	ldi	r25, 0x9B	; 155
    1110:	98 0f       	add	r25, r24
    1112:	93 30       	cpi	r25, 0x03	; 3
    1114:	08 f0       	brcs	.+2      	; 0x1118 <vfprintf+0xf8>
    1116:	71 c1       	rjmp	.+738    	; 0x13fa <vfprintf+0x3da>
    1118:	2f 7e       	andi	r18, 0xEF	; 239
    111a:	26 ff       	sbrs	r18, 6
    111c:	16 e0       	ldi	r17, 0x06	; 6
    111e:	2f 73       	andi	r18, 0x3F	; 63
    1120:	32 2e       	mov	r3, r18
    1122:	85 36       	cpi	r24, 0x65	; 101
    1124:	19 f4       	brne	.+6      	; 0x112c <vfprintf+0x10c>
    1126:	20 64       	ori	r18, 0x40	; 64
    1128:	32 2e       	mov	r3, r18
    112a:	08 c0       	rjmp	.+16     	; 0x113c <vfprintf+0x11c>
    112c:	86 36       	cpi	r24, 0x66	; 102
    112e:	21 f4       	brne	.+8      	; 0x1138 <vfprintf+0x118>
    1130:	f2 2f       	mov	r31, r18
    1132:	f0 68       	ori	r31, 0x80	; 128
    1134:	3f 2e       	mov	r3, r31
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x11c>
    1138:	11 11       	cpse	r17, r1
    113a:	11 50       	subi	r17, 0x01	; 1
    113c:	37 fe       	sbrs	r3, 7
    113e:	07 c0       	rjmp	.+14     	; 0x114e <vfprintf+0x12e>
    1140:	1c 33       	cpi	r17, 0x3C	; 60
    1142:	50 f4       	brcc	.+20     	; 0x1158 <vfprintf+0x138>
    1144:	ee 24       	eor	r14, r14
    1146:	e3 94       	inc	r14
    1148:	e1 0e       	add	r14, r17
    114a:	27 e0       	ldi	r18, 0x07	; 7
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <vfprintf+0x144>
    114e:	18 30       	cpi	r17, 0x08	; 8
    1150:	38 f0       	brcs	.+14     	; 0x1160 <vfprintf+0x140>
    1152:	27 e0       	ldi	r18, 0x07	; 7
    1154:	17 e0       	ldi	r17, 0x07	; 7
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <vfprintf+0x142>
    1158:	27 e0       	ldi	r18, 0x07	; 7
    115a:	4c e3       	ldi	r20, 0x3C	; 60
    115c:	e4 2e       	mov	r14, r20
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <vfprintf+0x144>
    1160:	21 2f       	mov	r18, r17
    1162:	e1 2c       	mov	r14, r1
    1164:	52 01       	movw	r10, r4
    1166:	44 e0       	ldi	r20, 0x04	; 4
    1168:	a4 0e       	add	r10, r20
    116a:	b1 1c       	adc	r11, r1
    116c:	f2 01       	movw	r30, r4
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	0e 2d       	mov	r16, r14
    1178:	a3 01       	movw	r20, r6
    117a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ftoa_engine>
    117e:	2c 01       	movw	r4, r24
    1180:	09 81       	ldd	r16, Y+1	; 0x01
    1182:	00 ff       	sbrs	r16, 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x16a>
    1186:	03 ff       	sbrs	r16, 3
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <vfprintf+0x178>
    118a:	31 fc       	sbrc	r3, 1
    118c:	08 c0       	rjmp	.+16     	; 0x119e <vfprintf+0x17e>
    118e:	32 fe       	sbrs	r3, 2
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <vfprintf+0x184>
    1192:	30 e2       	ldi	r19, 0x20	; 32
    1194:	23 2e       	mov	r2, r19
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <vfprintf+0x186>
    1198:	2d e2       	ldi	r18, 0x2D	; 45
    119a:	22 2e       	mov	r2, r18
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <vfprintf+0x186>
    119e:	9b e2       	ldi	r25, 0x2B	; 43
    11a0:	29 2e       	mov	r2, r25
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <vfprintf+0x186>
    11a4:	21 2c       	mov	r2, r1
    11a6:	80 2f       	mov	r24, r16
    11a8:	8c 70       	andi	r24, 0x0C	; 12
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <vfprintf+0x192>
    11ac:	21 10       	cpse	r2, r1
    11ae:	68 c2       	rjmp	.+1232   	; 0x1680 <vfprintf+0x660>
    11b0:	a8 c2       	rjmp	.+1360   	; 0x1702 <vfprintf+0x6e2>
    11b2:	37 fe       	sbrs	r3, 7
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <vfprintf+0x1b4>
    11b6:	e4 0c       	add	r14, r4
    11b8:	04 ff       	sbrs	r16, 4
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <vfprintf+0x1a4>
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	81 33       	cpi	r24, 0x31	; 49
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <vfprintf+0x1a4>
    11c2:	ea 94       	dec	r14
    11c4:	1e 14       	cp	r1, r14
    11c6:	74 f5       	brge	.+92     	; 0x1224 <vfprintf+0x204>
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	fe 15       	cp	r31, r14
    11cc:	78 f5       	brcc	.+94     	; 0x122c <vfprintf+0x20c>
    11ce:	88 e0       	ldi	r24, 0x08	; 8
    11d0:	e8 2e       	mov	r14, r24
    11d2:	2c c0       	rjmp	.+88     	; 0x122c <vfprintf+0x20c>
    11d4:	36 fc       	sbrc	r3, 6
    11d6:	2a c0       	rjmp	.+84     	; 0x122c <vfprintf+0x20c>
    11d8:	81 2f       	mov	r24, r17
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	84 15       	cp	r24, r4
    11de:	95 05       	cpc	r25, r5
    11e0:	9c f0       	brlt	.+38     	; 0x1208 <vfprintf+0x1e8>
    11e2:	2c ef       	ldi	r18, 0xFC	; 252
    11e4:	42 16       	cp	r4, r18
    11e6:	2f ef       	ldi	r18, 0xFF	; 255
    11e8:	52 06       	cpc	r5, r18
    11ea:	74 f0       	brlt	.+28     	; 0x1208 <vfprintf+0x1e8>
    11ec:	43 2d       	mov	r20, r3
    11ee:	40 68       	ori	r20, 0x80	; 128
    11f0:	34 2e       	mov	r3, r20
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <vfprintf+0x1e8>
    11f4:	e2 e0       	ldi	r30, 0x02	; 2
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	ec 0f       	add	r30, r28
    11fa:	fd 1f       	adc	r31, r29
    11fc:	e1 0f       	add	r30, r17
    11fe:	f1 1d       	adc	r31, r1
    1200:	80 81       	ld	r24, Z
    1202:	80 33       	cpi	r24, 0x30	; 48
    1204:	19 f4       	brne	.+6      	; 0x120c <vfprintf+0x1ec>
    1206:	11 50       	subi	r17, 0x01	; 1
    1208:	11 11       	cpse	r17, r1
    120a:	f4 cf       	rjmp	.-24     	; 0x11f4 <vfprintf+0x1d4>
    120c:	37 fe       	sbrs	r3, 7
    120e:	0e c0       	rjmp	.+28     	; 0x122c <vfprintf+0x20c>
    1210:	ee 24       	eor	r14, r14
    1212:	e3 94       	inc	r14
    1214:	e1 0e       	add	r14, r17
    1216:	81 2f       	mov	r24, r17
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	48 16       	cp	r4, r24
    121c:	59 06       	cpc	r5, r25
    121e:	2c f4       	brge	.+10     	; 0x122a <vfprintf+0x20a>
    1220:	14 19       	sub	r17, r4
    1222:	04 c0       	rjmp	.+8      	; 0x122c <vfprintf+0x20c>
    1224:	ee 24       	eor	r14, r14
    1226:	e3 94       	inc	r14
    1228:	01 c0       	rjmp	.+2      	; 0x122c <vfprintf+0x20c>
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	37 fe       	sbrs	r3, 7
    122e:	06 c0       	rjmp	.+12     	; 0x123c <vfprintf+0x21c>
    1230:	14 14       	cp	r1, r4
    1232:	15 04       	cpc	r1, r5
    1234:	34 f4       	brge	.+12     	; 0x1242 <vfprintf+0x222>
    1236:	c2 01       	movw	r24, r4
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <vfprintf+0x226>
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <vfprintf+0x226>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	21 10       	cpse	r2, r1
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	11 23       	and	r17, r17
    124c:	31 f0       	breq	.+12     	; 0x125a <vfprintf+0x23a>
    124e:	21 2f       	mov	r18, r17
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	82 0f       	add	r24, r18
    1258:	93 1f       	adc	r25, r19
    125a:	2f 2d       	mov	r18, r15
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	82 17       	cp	r24, r18
    1260:	93 07       	cpc	r25, r19
    1262:	14 f4       	brge	.+4      	; 0x1268 <vfprintf+0x248>
    1264:	f8 1a       	sub	r15, r24
    1266:	01 c0       	rjmp	.+2      	; 0x126a <vfprintf+0x24a>
    1268:	f1 2c       	mov	r15, r1
    126a:	83 2d       	mov	r24, r3
    126c:	89 70       	andi	r24, 0x09	; 9
    126e:	49 f4       	brne	.+18     	; 0x1282 <vfprintf+0x262>
    1270:	ff 20       	and	r15, r15
    1272:	39 f0       	breq	.+14     	; 0x1282 <vfprintf+0x262>
    1274:	b6 01       	movw	r22, r12
    1276:	80 e2       	ldi	r24, 0x20	; 32
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    127e:	fa 94       	dec	r15
    1280:	f7 cf       	rjmp	.-18     	; 0x1270 <vfprintf+0x250>
    1282:	22 20       	and	r2, r2
    1284:	29 f0       	breq	.+10     	; 0x1290 <vfprintf+0x270>
    1286:	b6 01       	movw	r22, r12
    1288:	82 2d       	mov	r24, r2
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1290:	33 fc       	sbrc	r3, 3
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <vfprintf+0x286>
    1294:	ff 20       	and	r15, r15
    1296:	39 f0       	breq	.+14     	; 0x12a6 <vfprintf+0x286>
    1298:	b6 01       	movw	r22, r12
    129a:	80 e3       	ldi	r24, 0x30	; 48
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    12a2:	fa 94       	dec	r15
    12a4:	f7 cf       	rjmp	.-18     	; 0x1294 <vfprintf+0x274>
    12a6:	37 fe       	sbrs	r3, 7
    12a8:	5a c0       	rjmp	.+180    	; 0x135e <vfprintf+0x33e>
    12aa:	94 2d       	mov	r25, r4
    12ac:	85 2d       	mov	r24, r5
    12ae:	57 fe       	sbrs	r5, 7
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <vfprintf+0x296>
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	29 2e       	mov	r2, r25
    12b8:	38 2e       	mov	r3, r24
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	a2 01       	movw	r20, r4
    12c0:	4e 19       	sub	r20, r14
    12c2:	51 09       	sbc	r21, r1
    12c4:	5d 87       	std	Y+13, r21	; 0x0d
    12c6:	4c 87       	std	Y+12, r20	; 0x0c
    12c8:	a2 01       	movw	r20, r4
    12ca:	42 19       	sub	r20, r2
    12cc:	53 09       	sbc	r21, r3
    12ce:	5f 87       	std	Y+15, r21	; 0x0f
    12d0:	4e 87       	std	Y+14, r20	; 0x0e
    12d2:	61 2f       	mov	r22, r17
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	44 27       	eor	r20, r20
    12d8:	55 27       	eor	r21, r21
    12da:	46 1b       	sub	r20, r22
    12dc:	57 0b       	sbc	r21, r23
    12de:	59 8b       	std	Y+17, r21	; 0x11
    12e0:	48 8b       	std	Y+16, r20	; 0x10
    12e2:	5f ef       	ldi	r21, 0xFF	; 255
    12e4:	25 16       	cp	r2, r21
    12e6:	35 06       	cpc	r3, r21
    12e8:	49 f4       	brne	.+18     	; 0x12fc <vfprintf+0x2dc>
    12ea:	b6 01       	movw	r22, r12
    12ec:	8e e2       	ldi	r24, 0x2E	; 46
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	2a 8b       	std	Y+18, r18	; 0x12
    12f2:	3b 8b       	std	Y+19, r19	; 0x13
    12f4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    12f8:	3b 89       	ldd	r19, Y+19	; 0x13
    12fa:	2a 89       	ldd	r18, Y+18	; 0x12
    12fc:	42 14       	cp	r4, r2
    12fe:	53 04       	cpc	r5, r3
    1300:	6c f0       	brlt	.+26     	; 0x131c <vfprintf+0x2fc>
    1302:	4c 85       	ldd	r20, Y+12	; 0x0c
    1304:	5d 85       	ldd	r21, Y+13	; 0x0d
    1306:	42 15       	cp	r20, r2
    1308:	53 05       	cpc	r21, r3
    130a:	44 f4       	brge	.+16     	; 0x131c <vfprintf+0x2fc>
    130c:	ee 85       	ldd	r30, Y+14	; 0x0e
    130e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1310:	e2 0f       	add	r30, r18
    1312:	f3 1f       	adc	r31, r19
    1314:	e6 0d       	add	r30, r6
    1316:	f7 1d       	adc	r31, r7
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	01 c0       	rjmp	.+2      	; 0x131e <vfprintf+0x2fe>
    131c:	80 e3       	ldi	r24, 0x30	; 48
    131e:	51 e0       	ldi	r21, 0x01	; 1
    1320:	25 1a       	sub	r2, r21
    1322:	31 08       	sbc	r3, r1
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	48 89       	ldd	r20, Y+16	; 0x10
    132a:	59 89       	ldd	r21, Y+17	; 0x11
    132c:	24 16       	cp	r2, r20
    132e:	35 06       	cpc	r3, r21
    1330:	4c f0       	brlt	.+18     	; 0x1344 <vfprintf+0x324>
    1332:	b6 01       	movw	r22, r12
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	2a 8b       	std	Y+18, r18	; 0x12
    1338:	3b 8b       	std	Y+19, r19	; 0x13
    133a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    133e:	2a 89       	ldd	r18, Y+18	; 0x12
    1340:	3b 89       	ldd	r19, Y+19	; 0x13
    1342:	cf cf       	rjmp	.-98     	; 0x12e2 <vfprintf+0x2c2>
    1344:	24 14       	cp	r2, r4
    1346:	35 04       	cpc	r3, r5
    1348:	39 f4       	brne	.+14     	; 0x1358 <vfprintf+0x338>
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	96 33       	cpi	r25, 0x36	; 54
    134e:	18 f4       	brcc	.+6      	; 0x1356 <vfprintf+0x336>
    1350:	95 33       	cpi	r25, 0x35	; 53
    1352:	11 f4       	brne	.+4      	; 0x1358 <vfprintf+0x338>
    1354:	04 ff       	sbrs	r16, 4
    1356:	81 e3       	ldi	r24, 0x31	; 49
    1358:	b6 01       	movw	r22, r12
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	4b c0       	rjmp	.+150    	; 0x13f4 <vfprintf+0x3d4>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	81 33       	cpi	r24, 0x31	; 49
    1362:	09 f0       	breq	.+2      	; 0x1366 <vfprintf+0x346>
    1364:	0f 7e       	andi	r16, 0xEF	; 239
    1366:	b6 01       	movw	r22, r12
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    136e:	11 11       	cpse	r17, r1
    1370:	05 c0       	rjmp	.+10     	; 0x137c <vfprintf+0x35c>
    1372:	34 fc       	sbrc	r3, 4
    1374:	18 c0       	rjmp	.+48     	; 0x13a6 <vfprintf+0x386>
    1376:	85 e6       	ldi	r24, 0x65	; 101
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <vfprintf+0x38a>
    137c:	b6 01       	movw	r22, r12
    137e:	8e e2       	ldi	r24, 0x2E	; 46
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	ee 24       	eor	r14, r14
    138a:	e3 94       	inc	r14
    138c:	e8 0e       	add	r14, r24
    138e:	f3 01       	movw	r30, r6
    1390:	e8 0f       	add	r30, r24
    1392:	f1 1d       	adc	r31, r1
    1394:	80 81       	ld	r24, Z
    1396:	b6 01       	movw	r22, r12
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    139e:	11 50       	subi	r17, 0x01	; 1
    13a0:	8e 2d       	mov	r24, r14
    13a2:	91 f7       	brne	.-28     	; 0x1388 <vfprintf+0x368>
    13a4:	e6 cf       	rjmp	.-52     	; 0x1372 <vfprintf+0x352>
    13a6:	85 e4       	ldi	r24, 0x45	; 69
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	b6 01       	movw	r22, r12
    13ac:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13b0:	57 fc       	sbrc	r5, 7
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <vfprintf+0x39e>
    13b4:	41 14       	cp	r4, r1
    13b6:	51 04       	cpc	r5, r1
    13b8:	39 f4       	brne	.+14     	; 0x13c8 <vfprintf+0x3a8>
    13ba:	04 ff       	sbrs	r16, 4
    13bc:	05 c0       	rjmp	.+10     	; 0x13c8 <vfprintf+0x3a8>
    13be:	51 94       	neg	r5
    13c0:	41 94       	neg	r4
    13c2:	51 08       	sbc	r5, r1
    13c4:	8d e2       	ldi	r24, 0x2D	; 45
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <vfprintf+0x3aa>
    13c8:	8b e2       	ldi	r24, 0x2B	; 43
    13ca:	b6 01       	movw	r22, r12
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13d2:	80 e3       	ldi	r24, 0x30	; 48
    13d4:	9a e0       	ldi	r25, 0x0A	; 10
    13d6:	49 16       	cp	r4, r25
    13d8:	51 04       	cpc	r5, r1
    13da:	2c f0       	brlt	.+10     	; 0x13e6 <vfprintf+0x3c6>
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	5a e0       	ldi	r21, 0x0A	; 10
    13e0:	45 1a       	sub	r4, r21
    13e2:	51 08       	sbc	r5, r1
    13e4:	f7 cf       	rjmp	.-18     	; 0x13d4 <vfprintf+0x3b4>
    13e6:	b6 01       	movw	r22, r12
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13ee:	b6 01       	movw	r22, r12
    13f0:	c2 01       	movw	r24, r4
    13f2:	c0 96       	adiw	r24, 0x30	; 48
    13f4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    13f8:	57 c1       	rjmp	.+686    	; 0x16a8 <vfprintf+0x688>
    13fa:	83 36       	cpi	r24, 0x63	; 99
    13fc:	31 f0       	breq	.+12     	; 0x140a <vfprintf+0x3ea>
    13fe:	83 37       	cpi	r24, 0x73	; 115
    1400:	79 f0       	breq	.+30     	; 0x1420 <vfprintf+0x400>
    1402:	83 35       	cpi	r24, 0x53	; 83
    1404:	09 f0       	breq	.+2      	; 0x1408 <vfprintf+0x3e8>
    1406:	58 c0       	rjmp	.+176    	; 0x14b8 <vfprintf+0x498>
    1408:	21 c0       	rjmp	.+66     	; 0x144c <vfprintf+0x42c>
    140a:	52 01       	movw	r10, r4
    140c:	e2 e0       	ldi	r30, 0x02	; 2
    140e:	ae 0e       	add	r10, r30
    1410:	b1 1c       	adc	r11, r1
    1412:	f2 01       	movw	r30, r4
    1414:	80 81       	ld	r24, Z
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	01 e0       	ldi	r16, 0x01	; 1
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	23 01       	movw	r4, r6
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <vfprintf+0x428>
    1420:	52 01       	movw	r10, r4
    1422:	f2 e0       	ldi	r31, 0x02	; 2
    1424:	af 0e       	add	r10, r31
    1426:	b1 1c       	adc	r11, r1
    1428:	f2 01       	movw	r30, r4
    142a:	40 80       	ld	r4, Z
    142c:	51 80       	ldd	r5, Z+1	; 0x01
    142e:	26 ff       	sbrs	r18, 6
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <vfprintf+0x418>
    1432:	61 2f       	mov	r22, r17
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x41c>
    1438:	6f ef       	ldi	r22, 0xFF	; 255
    143a:	7f ef       	ldi	r23, 0xFF	; 255
    143c:	c2 01       	movw	r24, r4
    143e:	2a 8b       	std	Y+18, r18	; 0x12
    1440:	0e 94 a6 0c 	call	0x194c	; 0x194c <strnlen>
    1444:	8c 01       	movw	r16, r24
    1446:	2a 89       	ldd	r18, Y+18	; 0x12
    1448:	2f 77       	andi	r18, 0x7F	; 127
    144a:	15 c0       	rjmp	.+42     	; 0x1476 <vfprintf+0x456>
    144c:	52 01       	movw	r10, r4
    144e:	f2 e0       	ldi	r31, 0x02	; 2
    1450:	af 0e       	add	r10, r31
    1452:	b1 1c       	adc	r11, r1
    1454:	f2 01       	movw	r30, r4
    1456:	40 80       	ld	r4, Z
    1458:	51 80       	ldd	r5, Z+1	; 0x01
    145a:	26 ff       	sbrs	r18, 6
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <vfprintf+0x444>
    145e:	61 2f       	mov	r22, r17
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0x448>
    1464:	6f ef       	ldi	r22, 0xFF	; 255
    1466:	7f ef       	ldi	r23, 0xFF	; 255
    1468:	c2 01       	movw	r24, r4
    146a:	2a 8b       	std	Y+18, r18	; 0x12
    146c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <strnlen_P>
    1470:	8c 01       	movw	r16, r24
    1472:	2a 89       	ldd	r18, Y+18	; 0x12
    1474:	20 68       	ori	r18, 0x80	; 128
    1476:	32 2e       	mov	r3, r18
    1478:	23 fd       	sbrc	r18, 3
    147a:	1a c0       	rjmp	.+52     	; 0x14b0 <vfprintf+0x490>
    147c:	8f 2d       	mov	r24, r15
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	08 17       	cp	r16, r24
    1482:	19 07       	cpc	r17, r25
    1484:	a8 f4       	brcc	.+42     	; 0x14b0 <vfprintf+0x490>
    1486:	b6 01       	movw	r22, r12
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1490:	fa 94       	dec	r15
    1492:	f4 cf       	rjmp	.-24     	; 0x147c <vfprintf+0x45c>
    1494:	f2 01       	movw	r30, r4
    1496:	37 fc       	sbrc	r3, 7
    1498:	85 91       	lpm	r24, Z+
    149a:	37 fe       	sbrs	r3, 7
    149c:	81 91       	ld	r24, Z+
    149e:	2f 01       	movw	r4, r30
    14a0:	b6 01       	movw	r22, r12
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    14a8:	f1 10       	cpse	r15, r1
    14aa:	fa 94       	dec	r15
    14ac:	01 50       	subi	r16, 0x01	; 1
    14ae:	11 09       	sbc	r17, r1
    14b0:	01 15       	cp	r16, r1
    14b2:	11 05       	cpc	r17, r1
    14b4:	79 f7       	brne	.-34     	; 0x1494 <vfprintf+0x474>
    14b6:	f8 c0       	rjmp	.+496    	; 0x16a8 <vfprintf+0x688>
    14b8:	84 36       	cpi	r24, 0x64	; 100
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <vfprintf+0x4a0>
    14bc:	89 36       	cpi	r24, 0x69	; 105
    14be:	59 f5       	brne	.+86     	; 0x1516 <vfprintf+0x4f6>
    14c0:	52 01       	movw	r10, r4
    14c2:	27 ff       	sbrs	r18, 7
    14c4:	09 c0       	rjmp	.+18     	; 0x14d8 <vfprintf+0x4b8>
    14c6:	f4 e0       	ldi	r31, 0x04	; 4
    14c8:	af 0e       	add	r10, r31
    14ca:	b1 1c       	adc	r11, r1
    14cc:	f2 01       	movw	r30, r4
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	93 81       	ldd	r25, Z+3	; 0x03
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <vfprintf+0x4cc>
    14d8:	f2 e0       	ldi	r31, 0x02	; 2
    14da:	af 0e       	add	r10, r31
    14dc:	b1 1c       	adc	r11, r1
    14de:	f2 01       	movw	r30, r4
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	07 2e       	mov	r0, r23
    14e6:	00 0c       	add	r0, r0
    14e8:	88 0b       	sbc	r24, r24
    14ea:	99 0b       	sbc	r25, r25
    14ec:	2f 76       	andi	r18, 0x6F	; 111
    14ee:	32 2e       	mov	r3, r18
    14f0:	97 ff       	sbrs	r25, 7
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <vfprintf+0x4e6>
    14f4:	90 95       	com	r25
    14f6:	80 95       	com	r24
    14f8:	70 95       	com	r23
    14fa:	61 95       	neg	r22
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	20 68       	ori	r18, 0x80	; 128
    1504:	32 2e       	mov	r3, r18
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	a3 01       	movw	r20, r6
    150c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__ultoa_invert>
    1510:	e8 2e       	mov	r14, r24
    1512:	e6 18       	sub	r14, r6
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <vfprintf+0x574>
    1516:	02 2f       	mov	r16, r18
    1518:	85 37       	cpi	r24, 0x75	; 117
    151a:	21 f4       	brne	.+8      	; 0x1524 <vfprintf+0x504>
    151c:	0f 7e       	andi	r16, 0xEF	; 239
    151e:	2a e0       	ldi	r18, 0x0A	; 10
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	1d c0       	rjmp	.+58     	; 0x155e <vfprintf+0x53e>
    1524:	09 7f       	andi	r16, 0xF9	; 249
    1526:	8f 36       	cpi	r24, 0x6F	; 111
    1528:	91 f0       	breq	.+36     	; 0x154e <vfprintf+0x52e>
    152a:	18 f4       	brcc	.+6      	; 0x1532 <vfprintf+0x512>
    152c:	88 35       	cpi	r24, 0x58	; 88
    152e:	59 f0       	breq	.+22     	; 0x1546 <vfprintf+0x526>
    1530:	c5 c0       	rjmp	.+394    	; 0x16bc <vfprintf+0x69c>
    1532:	80 37       	cpi	r24, 0x70	; 112
    1534:	19 f0       	breq	.+6      	; 0x153c <vfprintf+0x51c>
    1536:	88 37       	cpi	r24, 0x78	; 120
    1538:	11 f0       	breq	.+4      	; 0x153e <vfprintf+0x51e>
    153a:	c0 c0       	rjmp	.+384    	; 0x16bc <vfprintf+0x69c>
    153c:	00 61       	ori	r16, 0x10	; 16
    153e:	04 ff       	sbrs	r16, 4
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <vfprintf+0x534>
    1542:	04 60       	ori	r16, 0x04	; 4
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <vfprintf+0x534>
    1546:	24 ff       	sbrs	r18, 4
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x53a>
    154a:	06 60       	ori	r16, 0x06	; 6
    154c:	06 c0       	rjmp	.+12     	; 0x155a <vfprintf+0x53a>
    154e:	28 e0       	ldi	r18, 0x08	; 8
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	05 c0       	rjmp	.+10     	; 0x155e <vfprintf+0x53e>
    1554:	20 e1       	ldi	r18, 0x10	; 16
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x53e>
    155a:	20 e1       	ldi	r18, 0x10	; 16
    155c:	32 e0       	ldi	r19, 0x02	; 2
    155e:	52 01       	movw	r10, r4
    1560:	07 ff       	sbrs	r16, 7
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <vfprintf+0x556>
    1564:	f4 e0       	ldi	r31, 0x04	; 4
    1566:	af 0e       	add	r10, r31
    1568:	b1 1c       	adc	r11, r1
    156a:	f2 01       	movw	r30, r4
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <vfprintf+0x566>
    1576:	f2 e0       	ldi	r31, 0x02	; 2
    1578:	af 0e       	add	r10, r31
    157a:	b1 1c       	adc	r11, r1
    157c:	f2 01       	movw	r30, r4
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a3 01       	movw	r20, r6
    1588:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__ultoa_invert>
    158c:	e8 2e       	mov	r14, r24
    158e:	e6 18       	sub	r14, r6
    1590:	0f 77       	andi	r16, 0x7F	; 127
    1592:	30 2e       	mov	r3, r16
    1594:	36 fe       	sbrs	r3, 6
    1596:	0b c0       	rjmp	.+22     	; 0x15ae <vfprintf+0x58e>
    1598:	33 2d       	mov	r19, r3
    159a:	3e 7f       	andi	r19, 0xFE	; 254
    159c:	e1 16       	cp	r14, r17
    159e:	50 f4       	brcc	.+20     	; 0x15b4 <vfprintf+0x594>
    15a0:	34 fe       	sbrs	r3, 4
    15a2:	0a c0       	rjmp	.+20     	; 0x15b8 <vfprintf+0x598>
    15a4:	32 fc       	sbrc	r3, 2
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <vfprintf+0x598>
    15a8:	33 2d       	mov	r19, r3
    15aa:	3e 7e       	andi	r19, 0xEE	; 238
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <vfprintf+0x598>
    15ae:	0e 2d       	mov	r16, r14
    15b0:	33 2d       	mov	r19, r3
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <vfprintf+0x59a>
    15b4:	0e 2d       	mov	r16, r14
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <vfprintf+0x59a>
    15b8:	01 2f       	mov	r16, r17
    15ba:	34 ff       	sbrs	r19, 4
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <vfprintf+0x5b6>
    15be:	fe 01       	movw	r30, r28
    15c0:	ee 0d       	add	r30, r14
    15c2:	f1 1d       	adc	r31, r1
    15c4:	80 81       	ld	r24, Z
    15c6:	80 33       	cpi	r24, 0x30	; 48
    15c8:	11 f4       	brne	.+4      	; 0x15ce <vfprintf+0x5ae>
    15ca:	39 7e       	andi	r19, 0xE9	; 233
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <vfprintf+0x5be>
    15ce:	32 ff       	sbrs	r19, 2
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <vfprintf+0x5bc>
    15d2:	0e 5f       	subi	r16, 0xFE	; 254
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <vfprintf+0x5be>
    15d6:	83 2f       	mov	r24, r19
    15d8:	86 78       	andi	r24, 0x86	; 134
    15da:	09 f0       	breq	.+2      	; 0x15de <vfprintf+0x5be>
    15dc:	0f 5f       	subi	r16, 0xFF	; 255
    15de:	33 fd       	sbrc	r19, 3
    15e0:	13 c0       	rjmp	.+38     	; 0x1608 <vfprintf+0x5e8>
    15e2:	30 ff       	sbrs	r19, 0
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0x5d2>
    15e6:	1e 2d       	mov	r17, r14
    15e8:	0f 15       	cp	r16, r15
    15ea:	18 f4       	brcc	.+6      	; 0x15f2 <vfprintf+0x5d2>
    15ec:	1f 0d       	add	r17, r15
    15ee:	10 1b       	sub	r17, r16
    15f0:	0f 2d       	mov	r16, r15
    15f2:	0f 15       	cp	r16, r15
    15f4:	68 f4       	brcc	.+26     	; 0x1610 <vfprintf+0x5f0>
    15f6:	b6 01       	movw	r22, r12
    15f8:	80 e2       	ldi	r24, 0x20	; 32
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	3b 8b       	std	Y+19, r19	; 0x13
    15fe:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	3b 89       	ldd	r19, Y+19	; 0x13
    1606:	f5 cf       	rjmp	.-22     	; 0x15f2 <vfprintf+0x5d2>
    1608:	0f 15       	cp	r16, r15
    160a:	10 f4       	brcc	.+4      	; 0x1610 <vfprintf+0x5f0>
    160c:	f0 1a       	sub	r15, r16
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <vfprintf+0x5f2>
    1610:	f1 2c       	mov	r15, r1
    1612:	34 ff       	sbrs	r19, 4
    1614:	12 c0       	rjmp	.+36     	; 0x163a <vfprintf+0x61a>
    1616:	b6 01       	movw	r22, r12
    1618:	80 e3       	ldi	r24, 0x30	; 48
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	3b 8b       	std	Y+19, r19	; 0x13
    161e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1622:	3b 89       	ldd	r19, Y+19	; 0x13
    1624:	32 ff       	sbrs	r19, 2
    1626:	17 c0       	rjmp	.+46     	; 0x1656 <vfprintf+0x636>
    1628:	31 fd       	sbrc	r19, 1
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <vfprintf+0x612>
    162c:	88 e7       	ldi	r24, 0x78	; 120
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x616>
    1632:	88 e5       	ldi	r24, 0x58	; 88
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	b6 01       	movw	r22, r12
    1638:	0c c0       	rjmp	.+24     	; 0x1652 <vfprintf+0x632>
    163a:	83 2f       	mov	r24, r19
    163c:	86 78       	andi	r24, 0x86	; 134
    163e:	59 f0       	breq	.+22     	; 0x1656 <vfprintf+0x636>
    1640:	31 ff       	sbrs	r19, 1
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x628>
    1644:	8b e2       	ldi	r24, 0x2B	; 43
    1646:	01 c0       	rjmp	.+2      	; 0x164a <vfprintf+0x62a>
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	37 fd       	sbrc	r19, 7
    164c:	8d e2       	ldi	r24, 0x2D	; 45
    164e:	b6 01       	movw	r22, r12
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1656:	e1 16       	cp	r14, r17
    1658:	38 f4       	brcc	.+14     	; 0x1668 <vfprintf+0x648>
    165a:	b6 01       	movw	r22, r12
    165c:	80 e3       	ldi	r24, 0x30	; 48
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    1664:	11 50       	subi	r17, 0x01	; 1
    1666:	f7 cf       	rjmp	.-18     	; 0x1656 <vfprintf+0x636>
    1668:	ea 94       	dec	r14
    166a:	f3 01       	movw	r30, r6
    166c:	ee 0d       	add	r30, r14
    166e:	f1 1d       	adc	r31, r1
    1670:	80 81       	ld	r24, Z
    1672:	b6 01       	movw	r22, r12
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    167a:	e1 10       	cpse	r14, r1
    167c:	f5 cf       	rjmp	.-22     	; 0x1668 <vfprintf+0x648>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <vfprintf+0x688>
    1680:	f4 e0       	ldi	r31, 0x04	; 4
    1682:	ff 15       	cp	r31, r15
    1684:	58 f5       	brcc	.+86     	; 0x16dc <vfprintf+0x6bc>
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	f8 1a       	sub	r15, r24
    168a:	33 fe       	sbrs	r3, 3
    168c:	1e c0       	rjmp	.+60     	; 0x16ca <vfprintf+0x6aa>
    168e:	21 10       	cpse	r2, r1
    1690:	26 c0       	rjmp	.+76     	; 0x16de <vfprintf+0x6be>
    1692:	03 ff       	sbrs	r16, 3
    1694:	2a c0       	rjmp	.+84     	; 0x16ea <vfprintf+0x6ca>
    1696:	08 e6       	ldi	r16, 0x68	; 104
    1698:	10 e0       	ldi	r17, 0x00	; 0
    169a:	f3 2d       	mov	r31, r3
    169c:	f0 71       	andi	r31, 0x10	; 16
    169e:	3f 2e       	mov	r3, r31
    16a0:	f8 01       	movw	r30, r16
    16a2:	84 91       	lpm	r24, Z
    16a4:	81 11       	cpse	r24, r1
    16a6:	24 c0       	rjmp	.+72     	; 0x16f0 <vfprintf+0x6d0>
    16a8:	ff 20       	and	r15, r15
    16aa:	09 f4       	brne	.+2      	; 0x16ae <vfprintf+0x68e>
    16ac:	e5 cc       	rjmp	.-1590   	; 0x1078 <vfprintf+0x58>
    16ae:	b6 01       	movw	r22, r12
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16b8:	fa 94       	dec	r15
    16ba:	f6 cf       	rjmp	.-20     	; 0x16a8 <vfprintf+0x688>
    16bc:	f6 01       	movw	r30, r12
    16be:	86 81       	ldd	r24, Z+6	; 0x06
    16c0:	97 81       	ldd	r25, Z+7	; 0x07
    16c2:	26 c0       	rjmp	.+76     	; 0x1710 <vfprintf+0x6f0>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	23 c0       	rjmp	.+70     	; 0x1710 <vfprintf+0x6f0>
    16ca:	b6 01       	movw	r22, r12
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16d4:	fa 94       	dec	r15
    16d6:	f1 10       	cpse	r15, r1
    16d8:	f8 cf       	rjmp	.-16     	; 0x16ca <vfprintf+0x6aa>
    16da:	d9 cf       	rjmp	.-78     	; 0x168e <vfprintf+0x66e>
    16dc:	f1 2c       	mov	r15, r1
    16de:	b6 01       	movw	r22, r12
    16e0:	82 2d       	mov	r24, r2
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16e8:	d4 cf       	rjmp	.-88     	; 0x1692 <vfprintf+0x672>
    16ea:	0c e6       	ldi	r16, 0x6C	; 108
    16ec:	10 e0       	ldi	r17, 0x00	; 0
    16ee:	d5 cf       	rjmp	.-86     	; 0x169a <vfprintf+0x67a>
    16f0:	31 10       	cpse	r3, r1
    16f2:	80 52       	subi	r24, 0x20	; 32
    16f4:	b6 01       	movw	r22, r12
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <fputc>
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	cf cf       	rjmp	.-98     	; 0x16a0 <vfprintf+0x680>
    1702:	23 e0       	ldi	r18, 0x03	; 3
    1704:	2f 15       	cp	r18, r15
    1706:	10 f4       	brcc	.+4      	; 0x170c <vfprintf+0x6ec>
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	be cf       	rjmp	.-132    	; 0x1688 <vfprintf+0x668>
    170c:	f1 2c       	mov	r15, r1
    170e:	c1 cf       	rjmp	.-126    	; 0x1692 <vfprintf+0x672>
    1710:	63 96       	adiw	r28, 0x13	; 19
    1712:	e2 e1       	ldi	r30, 0x12	; 18
    1714:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__epilogue_restores__>

00001718 <__prologue_saves__>:
    1718:	2f 92       	push	r2
    171a:	3f 92       	push	r3
    171c:	4f 92       	push	r4
    171e:	5f 92       	push	r5
    1720:	6f 92       	push	r6
    1722:	7f 92       	push	r7
    1724:	8f 92       	push	r8
    1726:	9f 92       	push	r9
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	ca 1b       	sub	r28, r26
    1742:	db 0b       	sbc	r29, r27
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	09 94       	ijmp

00001750 <__epilogue_restores__>:
    1750:	2a 88       	ldd	r2, Y+18	; 0x12
    1752:	39 88       	ldd	r3, Y+17	; 0x11
    1754:	48 88       	ldd	r4, Y+16	; 0x10
    1756:	5f 84       	ldd	r5, Y+15	; 0x0f
    1758:	6e 84       	ldd	r6, Y+14	; 0x0e
    175a:	7d 84       	ldd	r7, Y+13	; 0x0d
    175c:	8c 84       	ldd	r8, Y+12	; 0x0c
    175e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1760:	aa 84       	ldd	r10, Y+10	; 0x0a
    1762:	b9 84       	ldd	r11, Y+9	; 0x09
    1764:	c8 84       	ldd	r12, Y+8	; 0x08
    1766:	df 80       	ldd	r13, Y+7	; 0x07
    1768:	ee 80       	ldd	r14, Y+6	; 0x06
    176a:	fd 80       	ldd	r15, Y+5	; 0x05
    176c:	0c 81       	ldd	r16, Y+4	; 0x04
    176e:	1b 81       	ldd	r17, Y+3	; 0x03
    1770:	aa 81       	ldd	r26, Y+2	; 0x02
    1772:	b9 81       	ldd	r27, Y+1	; 0x01
    1774:	ce 0f       	add	r28, r30
    1776:	d1 1d       	adc	r29, r1
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	ed 01       	movw	r28, r26
    1784:	08 95       	ret

00001786 <__ftoa_engine>:
    1786:	28 30       	cpi	r18, 0x08	; 8
    1788:	08 f0       	brcs	.+2      	; 0x178c <__ftoa_engine+0x6>
    178a:	27 e0       	ldi	r18, 0x07	; 7
    178c:	33 27       	eor	r19, r19
    178e:	da 01       	movw	r26, r20
    1790:	99 0f       	add	r25, r25
    1792:	31 1d       	adc	r19, r1
    1794:	87 fd       	sbrc	r24, 7
    1796:	91 60       	ori	r25, 0x01	; 1
    1798:	00 96       	adiw	r24, 0x00	; 0
    179a:	61 05       	cpc	r22, r1
    179c:	71 05       	cpc	r23, r1
    179e:	39 f4       	brne	.+14     	; 0x17ae <__ftoa_engine+0x28>
    17a0:	32 60       	ori	r19, 0x02	; 2
    17a2:	2e 5f       	subi	r18, 0xFE	; 254
    17a4:	3d 93       	st	X+, r19
    17a6:	30 e3       	ldi	r19, 0x30	; 48
    17a8:	2a 95       	dec	r18
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <__ftoa_engine+0x1e>
    17ac:	08 95       	ret
    17ae:	9f 3f       	cpi	r25, 0xFF	; 255
    17b0:	30 f0       	brcs	.+12     	; 0x17be <__ftoa_engine+0x38>
    17b2:	80 38       	cpi	r24, 0x80	; 128
    17b4:	71 05       	cpc	r23, r1
    17b6:	61 05       	cpc	r22, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__ftoa_engine+0x36>
    17ba:	3c 5f       	subi	r19, 0xFC	; 252
    17bc:	3c 5f       	subi	r19, 0xFC	; 252
    17be:	3d 93       	st	X+, r19
    17c0:	91 30       	cpi	r25, 0x01	; 1
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <__ftoa_engine+0x40>
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	91 1d       	adc	r25, r1
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	1f 93       	push	r17
    17ce:	0f 93       	push	r16
    17d0:	ff 92       	push	r15
    17d2:	ef 92       	push	r14
    17d4:	19 2f       	mov	r17, r25
    17d6:	98 7f       	andi	r25, 0xF8	; 248
    17d8:	96 95       	lsr	r25
    17da:	e9 2f       	mov	r30, r25
    17dc:	96 95       	lsr	r25
    17de:	96 95       	lsr	r25
    17e0:	e9 0f       	add	r30, r25
    17e2:	ff 27       	eor	r31, r31
    17e4:	e6 53       	subi	r30, 0x36	; 54
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	99 27       	eor	r25, r25
    17ea:	33 27       	eor	r19, r19
    17ec:	ee 24       	eor	r14, r14
    17ee:	ff 24       	eor	r15, r15
    17f0:	a7 01       	movw	r20, r14
    17f2:	e7 01       	movw	r28, r14
    17f4:	05 90       	lpm	r0, Z+
    17f6:	08 94       	sec
    17f8:	07 94       	ror	r0
    17fa:	28 f4       	brcc	.+10     	; 0x1806 <__ftoa_engine+0x80>
    17fc:	36 0f       	add	r19, r22
    17fe:	e7 1e       	adc	r14, r23
    1800:	f8 1e       	adc	r15, r24
    1802:	49 1f       	adc	r20, r25
    1804:	51 1d       	adc	r21, r1
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	06 94       	lsr	r0
    1810:	a1 f7       	brne	.-24     	; 0x17fa <__ftoa_engine+0x74>
    1812:	05 90       	lpm	r0, Z+
    1814:	07 94       	ror	r0
    1816:	28 f4       	brcc	.+10     	; 0x1822 <__ftoa_engine+0x9c>
    1818:	e7 0e       	add	r14, r23
    181a:	f8 1e       	adc	r15, r24
    181c:	49 1f       	adc	r20, r25
    181e:	56 1f       	adc	r21, r22
    1820:	c1 1d       	adc	r28, r1
    1822:	77 0f       	add	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	66 1f       	adc	r22, r22
    182a:	06 94       	lsr	r0
    182c:	a1 f7       	brne	.-24     	; 0x1816 <__ftoa_engine+0x90>
    182e:	05 90       	lpm	r0, Z+
    1830:	07 94       	ror	r0
    1832:	28 f4       	brcc	.+10     	; 0x183e <__ftoa_engine+0xb8>
    1834:	f8 0e       	add	r15, r24
    1836:	49 1f       	adc	r20, r25
    1838:	56 1f       	adc	r21, r22
    183a:	c7 1f       	adc	r28, r23
    183c:	d1 1d       	adc	r29, r1
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	66 1f       	adc	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	06 94       	lsr	r0
    1848:	a1 f7       	brne	.-24     	; 0x1832 <__ftoa_engine+0xac>
    184a:	05 90       	lpm	r0, Z+
    184c:	07 94       	ror	r0
    184e:	20 f4       	brcc	.+8      	; 0x1858 <__ftoa_engine+0xd2>
    1850:	49 0f       	add	r20, r25
    1852:	56 1f       	adc	r21, r22
    1854:	c7 1f       	adc	r28, r23
    1856:	d8 1f       	adc	r29, r24
    1858:	99 0f       	add	r25, r25
    185a:	66 1f       	adc	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	06 94       	lsr	r0
    1862:	a9 f7       	brne	.-22     	; 0x184e <__ftoa_engine+0xc8>
    1864:	84 91       	lpm	r24, Z
    1866:	10 95       	com	r17
    1868:	17 70       	andi	r17, 0x07	; 7
    186a:	41 f0       	breq	.+16     	; 0x187c <__ftoa_engine+0xf6>
    186c:	d6 95       	lsr	r29
    186e:	c7 95       	ror	r28
    1870:	57 95       	ror	r21
    1872:	47 95       	ror	r20
    1874:	f7 94       	ror	r15
    1876:	e7 94       	ror	r14
    1878:	1a 95       	dec	r17
    187a:	c1 f7       	brne	.-16     	; 0x186c <__ftoa_engine+0xe6>
    187c:	e0 e7       	ldi	r30, 0x70	; 112
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	68 94       	set
    1882:	15 90       	lpm	r1, Z+
    1884:	15 91       	lpm	r17, Z+
    1886:	35 91       	lpm	r19, Z+
    1888:	65 91       	lpm	r22, Z+
    188a:	95 91       	lpm	r25, Z+
    188c:	05 90       	lpm	r0, Z+
    188e:	7f e2       	ldi	r23, 0x2F	; 47
    1890:	73 95       	inc	r23
    1892:	e1 18       	sub	r14, r1
    1894:	f1 0a       	sbc	r15, r17
    1896:	43 0b       	sbc	r20, r19
    1898:	56 0b       	sbc	r21, r22
    189a:	c9 0b       	sbc	r28, r25
    189c:	d0 09       	sbc	r29, r0
    189e:	c0 f7       	brcc	.-16     	; 0x1890 <__ftoa_engine+0x10a>
    18a0:	e1 0c       	add	r14, r1
    18a2:	f1 1e       	adc	r15, r17
    18a4:	43 1f       	adc	r20, r19
    18a6:	56 1f       	adc	r21, r22
    18a8:	c9 1f       	adc	r28, r25
    18aa:	d0 1d       	adc	r29, r0
    18ac:	7e f4       	brtc	.+30     	; 0x18cc <__ftoa_engine+0x146>
    18ae:	70 33       	cpi	r23, 0x30	; 48
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <__ftoa_engine+0x130>
    18b2:	8a 95       	dec	r24
    18b4:	e6 cf       	rjmp	.-52     	; 0x1882 <__ftoa_engine+0xfc>
    18b6:	e8 94       	clt
    18b8:	01 50       	subi	r16, 0x01	; 1
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <__ftoa_engine+0x142>
    18bc:	08 0f       	add	r16, r24
    18be:	0a f4       	brpl	.+2      	; 0x18c2 <__ftoa_engine+0x13c>
    18c0:	00 27       	eor	r16, r16
    18c2:	02 17       	cp	r16, r18
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <__ftoa_engine+0x142>
    18c6:	20 2f       	mov	r18, r16
    18c8:	23 95       	inc	r18
    18ca:	02 2f       	mov	r16, r18
    18cc:	7a 33       	cpi	r23, 0x3A	; 58
    18ce:	28 f0       	brcs	.+10     	; 0x18da <__ftoa_engine+0x154>
    18d0:	79 e3       	ldi	r23, 0x39	; 57
    18d2:	7d 93       	st	X+, r23
    18d4:	2a 95       	dec	r18
    18d6:	e9 f7       	brne	.-6      	; 0x18d2 <__ftoa_engine+0x14c>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <__ftoa_engine+0x174>
    18da:	7d 93       	st	X+, r23
    18dc:	2a 95       	dec	r18
    18de:	89 f6       	brne	.-94     	; 0x1882 <__ftoa_engine+0xfc>
    18e0:	06 94       	lsr	r0
    18e2:	97 95       	ror	r25
    18e4:	67 95       	ror	r22
    18e6:	37 95       	ror	r19
    18e8:	17 95       	ror	r17
    18ea:	17 94       	ror	r1
    18ec:	e1 18       	sub	r14, r1
    18ee:	f1 0a       	sbc	r15, r17
    18f0:	43 0b       	sbc	r20, r19
    18f2:	56 0b       	sbc	r21, r22
    18f4:	c9 0b       	sbc	r28, r25
    18f6:	d0 09       	sbc	r29, r0
    18f8:	98 f0       	brcs	.+38     	; 0x1920 <__ftoa_engine+0x19a>
    18fa:	23 95       	inc	r18
    18fc:	7e 91       	ld	r23, -X
    18fe:	73 95       	inc	r23
    1900:	7a 33       	cpi	r23, 0x3A	; 58
    1902:	08 f0       	brcs	.+2      	; 0x1906 <__ftoa_engine+0x180>
    1904:	70 e3       	ldi	r23, 0x30	; 48
    1906:	7c 93       	st	X, r23
    1908:	20 13       	cpse	r18, r16
    190a:	b8 f7       	brcc	.-18     	; 0x18fa <__ftoa_engine+0x174>
    190c:	7e 91       	ld	r23, -X
    190e:	70 61       	ori	r23, 0x10	; 16
    1910:	7d 93       	st	X+, r23
    1912:	30 f0       	brcs	.+12     	; 0x1920 <__ftoa_engine+0x19a>
    1914:	83 95       	inc	r24
    1916:	71 e3       	ldi	r23, 0x31	; 49
    1918:	7d 93       	st	X+, r23
    191a:	70 e3       	ldi	r23, 0x30	; 48
    191c:	2a 95       	dec	r18
    191e:	e1 f7       	brne	.-8      	; 0x1918 <__ftoa_engine+0x192>
    1920:	11 24       	eor	r1, r1
    1922:	ef 90       	pop	r14
    1924:	ff 90       	pop	r15
    1926:	0f 91       	pop	r16
    1928:	1f 91       	pop	r17
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	99 27       	eor	r25, r25
    1930:	87 fd       	sbrc	r24, 7
    1932:	90 95       	com	r25
    1934:	08 95       	ret

00001936 <strnlen_P>:
    1936:	fc 01       	movw	r30, r24
    1938:	05 90       	lpm	r0, Z+
    193a:	61 50       	subi	r22, 0x01	; 1
    193c:	70 40       	sbci	r23, 0x00	; 0
    193e:	01 10       	cpse	r0, r1
    1940:	d8 f7       	brcc	.-10     	; 0x1938 <strnlen_P+0x2>
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	8e 0f       	add	r24, r30
    1948:	9f 1f       	adc	r25, r31
    194a:	08 95       	ret

0000194c <strnlen>:
    194c:	fc 01       	movw	r30, r24
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	70 40       	sbci	r23, 0x00	; 0
    1952:	01 90       	ld	r0, Z+
    1954:	01 10       	cpse	r0, r1
    1956:	d8 f7       	brcc	.-10     	; 0x194e <strnlen+0x2>
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	8e 0f       	add	r24, r30
    195e:	9f 1f       	adc	r25, r31
    1960:	08 95       	ret

00001962 <fputc>:
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	fb 01       	movw	r30, r22
    196c:	23 81       	ldd	r18, Z+3	; 0x03
    196e:	21 fd       	sbrc	r18, 1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <fputc+0x16>
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	28 c0       	rjmp	.+80     	; 0x19c8 <fputc+0x66>
    1978:	22 ff       	sbrs	r18, 2
    197a:	16 c0       	rjmp	.+44     	; 0x19a8 <fputc+0x46>
    197c:	46 81       	ldd	r20, Z+6	; 0x06
    197e:	57 81       	ldd	r21, Z+7	; 0x07
    1980:	24 81       	ldd	r18, Z+4	; 0x04
    1982:	35 81       	ldd	r19, Z+5	; 0x05
    1984:	42 17       	cp	r20, r18
    1986:	53 07       	cpc	r21, r19
    1988:	44 f4       	brge	.+16     	; 0x199a <fputc+0x38>
    198a:	a0 81       	ld	r26, Z
    198c:	b1 81       	ldd	r27, Z+1	; 0x01
    198e:	9d 01       	movw	r18, r26
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	31 83       	std	Z+1, r19	; 0x01
    1996:	20 83       	st	Z, r18
    1998:	8c 93       	st	X, r24
    199a:	26 81       	ldd	r18, Z+6	; 0x06
    199c:	37 81       	ldd	r19, Z+7	; 0x07
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	37 83       	std	Z+7, r19	; 0x07
    19a4:	26 83       	std	Z+6, r18	; 0x06
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <fputc+0x66>
    19a8:	eb 01       	movw	r28, r22
    19aa:	09 2f       	mov	r16, r25
    19ac:	18 2f       	mov	r17, r24
    19ae:	00 84       	ldd	r0, Z+8	; 0x08
    19b0:	f1 85       	ldd	r31, Z+9	; 0x09
    19b2:	e0 2d       	mov	r30, r0
    19b4:	09 95       	icall
    19b6:	89 2b       	or	r24, r25
    19b8:	e1 f6       	brne	.-72     	; 0x1972 <fputc+0x10>
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	9f 83       	std	Y+7, r25	; 0x07
    19c2:	8e 83       	std	Y+6, r24	; 0x06
    19c4:	81 2f       	mov	r24, r17
    19c6:	90 2f       	mov	r25, r16
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <printf>:
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ef ee       	ldi	r30, 0xEF	; 239
    19d8:	fc e0       	ldi	r31, 0x0C	; 12
    19da:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__prologue_saves__+0x20>
    19de:	ae 01       	movw	r20, r28
    19e0:	4b 5f       	subi	r20, 0xFB	; 251
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	fa 01       	movw	r30, r20
    19e6:	61 91       	ld	r22, Z+
    19e8:	71 91       	ld	r23, Z+
    19ea:	af 01       	movw	r20, r30
    19ec:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__iob+0x2>
    19f0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__iob+0x3>
    19f4:	0e 94 10 08 	call	0x1020	; 0x1020 <vfprintf>
    19f8:	e2 e0       	ldi	r30, 0x02	; 2
    19fa:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__epilogue_restores__+0x20>

000019fe <puts>:
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__iob+0x2>
    1a0a:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__iob+0x3>
    1a0e:	23 81       	ldd	r18, Z+3	; 0x03
    1a10:	21 ff       	sbrs	r18, 1
    1a12:	1b c0       	rjmp	.+54     	; 0x1a4a <puts+0x4c>
    1a14:	8c 01       	movw	r16, r24
    1a16:	d0 e0       	ldi	r29, 0x00	; 0
    1a18:	c0 e0       	ldi	r28, 0x00	; 0
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	81 91       	ld	r24, Z+
    1a1e:	8f 01       	movw	r16, r30
    1a20:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <__iob+0x2>
    1a24:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <__iob+0x3>
    1a28:	db 01       	movw	r26, r22
    1a2a:	18 96       	adiw	r26, 0x08	; 8
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	19 97       	sbiw	r26, 0x09	; 9
    1a32:	88 23       	and	r24, r24
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <puts+0x44>
    1a36:	09 95       	icall
    1a38:	89 2b       	or	r24, r25
    1a3a:	79 f3       	breq	.-34     	; 0x1a1a <puts+0x1c>
    1a3c:	df ef       	ldi	r29, 0xFF	; 255
    1a3e:	cf ef       	ldi	r28, 0xFF	; 255
    1a40:	ec cf       	rjmp	.-40     	; 0x1a1a <puts+0x1c>
    1a42:	8a e0       	ldi	r24, 0x0A	; 10
    1a44:	09 95       	icall
    1a46:	89 2b       	or	r24, r25
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <puts+0x52>
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <puts+0x56>
    1a50:	8d 2f       	mov	r24, r29
    1a52:	9c 2f       	mov	r25, r28
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <__ultoa_invert>:
    1a5e:	fa 01       	movw	r30, r20
    1a60:	aa 27       	eor	r26, r26
    1a62:	28 30       	cpi	r18, 0x08	; 8
    1a64:	51 f1       	breq	.+84     	; 0x1aba <__ultoa_invert+0x5c>
    1a66:	20 31       	cpi	r18, 0x10	; 16
    1a68:	81 f1       	breq	.+96     	; 0x1aca <__ultoa_invert+0x6c>
    1a6a:	e8 94       	clt
    1a6c:	6f 93       	push	r22
    1a6e:	6e 7f       	andi	r22, 0xFE	; 254
    1a70:	6e 5f       	subi	r22, 0xFE	; 254
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	8f 4f       	sbci	r24, 0xFF	; 255
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	af 4f       	sbci	r26, 0xFF	; 255
    1a7a:	b1 e0       	ldi	r27, 0x01	; 1
    1a7c:	3e d0       	rcall	.+124    	; 0x1afa <__ultoa_invert+0x9c>
    1a7e:	b4 e0       	ldi	r27, 0x04	; 4
    1a80:	3c d0       	rcall	.+120    	; 0x1afa <__ultoa_invert+0x9c>
    1a82:	67 0f       	add	r22, r23
    1a84:	78 1f       	adc	r23, r24
    1a86:	89 1f       	adc	r24, r25
    1a88:	9a 1f       	adc	r25, r26
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	68 0f       	add	r22, r24
    1a8e:	79 1f       	adc	r23, r25
    1a90:	8a 1f       	adc	r24, r26
    1a92:	91 1d       	adc	r25, r1
    1a94:	a1 1d       	adc	r26, r1
    1a96:	6a 0f       	add	r22, r26
    1a98:	71 1d       	adc	r23, r1
    1a9a:	81 1d       	adc	r24, r1
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	20 d0       	rcall	.+64     	; 0x1ae2 <__ultoa_invert+0x84>
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <__ultoa_invert+0x48>
    1aa4:	68 94       	set
    1aa6:	3f 91       	pop	r19
    1aa8:	2a e0       	ldi	r18, 0x0A	; 10
    1aaa:	26 9f       	mul	r18, r22
    1aac:	11 24       	eor	r1, r1
    1aae:	30 19       	sub	r19, r0
    1ab0:	30 5d       	subi	r19, 0xD0	; 208
    1ab2:	31 93       	st	Z+, r19
    1ab4:	de f6       	brtc	.-74     	; 0x1a6c <__ultoa_invert+0xe>
    1ab6:	cf 01       	movw	r24, r30
    1ab8:	08 95       	ret
    1aba:	46 2f       	mov	r20, r22
    1abc:	47 70       	andi	r20, 0x07	; 7
    1abe:	40 5d       	subi	r20, 0xD0	; 208
    1ac0:	41 93       	st	Z+, r20
    1ac2:	b3 e0       	ldi	r27, 0x03	; 3
    1ac4:	0f d0       	rcall	.+30     	; 0x1ae4 <__ultoa_invert+0x86>
    1ac6:	c9 f7       	brne	.-14     	; 0x1aba <__ultoa_invert+0x5c>
    1ac8:	f6 cf       	rjmp	.-20     	; 0x1ab6 <__ultoa_invert+0x58>
    1aca:	46 2f       	mov	r20, r22
    1acc:	4f 70       	andi	r20, 0x0F	; 15
    1ace:	40 5d       	subi	r20, 0xD0	; 208
    1ad0:	4a 33       	cpi	r20, 0x3A	; 58
    1ad2:	18 f0       	brcs	.+6      	; 0x1ada <__ultoa_invert+0x7c>
    1ad4:	49 5d       	subi	r20, 0xD9	; 217
    1ad6:	31 fd       	sbrc	r19, 1
    1ad8:	40 52       	subi	r20, 0x20	; 32
    1ada:	41 93       	st	Z+, r20
    1adc:	02 d0       	rcall	.+4      	; 0x1ae2 <__ultoa_invert+0x84>
    1ade:	a9 f7       	brne	.-22     	; 0x1aca <__ultoa_invert+0x6c>
    1ae0:	ea cf       	rjmp	.-44     	; 0x1ab6 <__ultoa_invert+0x58>
    1ae2:	b4 e0       	ldi	r27, 0x04	; 4
    1ae4:	a6 95       	lsr	r26
    1ae6:	97 95       	ror	r25
    1ae8:	87 95       	ror	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	ba 95       	dec	r27
    1af0:	c9 f7       	brne	.-14     	; 0x1ae4 <__ultoa_invert+0x86>
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	61 05       	cpc	r22, r1
    1af6:	71 05       	cpc	r23, r1
    1af8:	08 95       	ret
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	0a 2e       	mov	r0, r26
    1b00:	06 94       	lsr	r0
    1b02:	57 95       	ror	r21
    1b04:	47 95       	ror	r20
    1b06:	37 95       	ror	r19
    1b08:	27 95       	ror	r18
    1b0a:	ba 95       	dec	r27
    1b0c:	c9 f7       	brne	.-14     	; 0x1b00 <__ultoa_invert+0xa2>
    1b0e:	62 0f       	add	r22, r18
    1b10:	73 1f       	adc	r23, r19
    1b12:	84 1f       	adc	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	a0 1d       	adc	r26, r0
    1b18:	08 95       	ret

00001b1a <_exit>:
    1b1a:	f8 94       	cli

00001b1c <__stop_program>:
    1b1c:	ff cf       	rjmp	.-2      	; 0x1b1c <__stop_program>
